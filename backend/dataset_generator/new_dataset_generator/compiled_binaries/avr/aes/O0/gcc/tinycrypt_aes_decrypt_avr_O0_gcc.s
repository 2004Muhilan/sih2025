	.file	"tinycrypt_aes_decrypt.c"
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__SREG__ = 0x3f
__tmp_reg__ = 0
__zero_reg__ = 1
	.text
	.section	.rodata
	.type	inv_sbox, @object
	.size	inv_sbox, 256
inv_sbox:
	.byte	82
	.byte	9
	.byte	106
	.byte	-43
	.byte	48
	.byte	54
	.byte	-91
	.byte	56
	.byte	-65
	.byte	64
	.byte	-93
	.byte	-98
	.byte	-127
	.byte	-13
	.byte	-41
	.byte	-5
	.byte	124
	.byte	-29
	.byte	57
	.byte	-126
	.byte	-101
	.byte	47
	.byte	-1
	.byte	-121
	.byte	52
	.byte	-114
	.byte	67
	.byte	68
	.byte	-60
	.byte	-34
	.byte	-23
	.byte	-53
	.byte	84
	.byte	123
	.byte	-108
	.byte	50
	.byte	-90
	.byte	-62
	.byte	35
	.byte	61
	.byte	-18
	.byte	76
	.byte	-107
	.byte	11
	.byte	66
	.byte	-6
	.byte	-61
	.byte	78
	.byte	8
	.byte	46
	.byte	-95
	.byte	102
	.byte	40
	.byte	-39
	.byte	36
	.byte	-78
	.byte	118
	.byte	91
	.byte	-94
	.byte	73
	.byte	109
	.byte	-117
	.byte	-47
	.byte	37
	.byte	114
	.byte	-8
	.byte	-10
	.byte	100
	.byte	-122
	.byte	104
	.byte	-104
	.byte	22
	.byte	-44
	.byte	-92
	.byte	92
	.byte	-52
	.byte	93
	.byte	101
	.byte	-74
	.byte	-110
	.byte	108
	.byte	112
	.byte	72
	.byte	80
	.byte	-3
	.byte	-19
	.byte	-71
	.byte	-38
	.byte	94
	.byte	21
	.byte	70
	.byte	87
	.byte	-89
	.byte	-115
	.byte	-99
	.byte	-124
	.byte	-112
	.byte	-40
	.byte	-85
	.byte	0
	.byte	-116
	.byte	-68
	.byte	-45
	.byte	10
	.byte	-9
	.byte	-28
	.byte	88
	.byte	5
	.byte	-72
	.byte	-77
	.byte	69
	.byte	6
	.byte	-48
	.byte	44
	.byte	30
	.byte	-113
	.byte	-54
	.byte	63
	.byte	15
	.byte	2
	.byte	-63
	.byte	-81
	.byte	-67
	.byte	3
	.byte	1
	.byte	19
	.byte	-118
	.byte	107
	.byte	58
	.byte	-111
	.byte	17
	.byte	65
	.byte	79
	.byte	103
	.byte	-36
	.byte	-22
	.byte	-105
	.byte	-14
	.byte	-49
	.byte	-50
	.byte	-16
	.byte	-76
	.byte	-26
	.byte	115
	.byte	-106
	.byte	-84
	.byte	116
	.byte	34
	.byte	-25
	.byte	-83
	.byte	53
	.byte	-123
	.byte	-30
	.byte	-7
	.byte	55
	.byte	-24
	.byte	28
	.byte	117
	.byte	-33
	.byte	110
	.byte	71
	.byte	-15
	.byte	26
	.byte	113
	.byte	29
	.byte	41
	.byte	-59
	.byte	-119
	.byte	111
	.byte	-73
	.byte	98
	.byte	14
	.byte	-86
	.byte	24
	.byte	-66
	.byte	27
	.byte	-4
	.byte	86
	.byte	62
	.byte	75
	.byte	-58
	.byte	-46
	.byte	121
	.byte	32
	.byte	-102
	.byte	-37
	.byte	-64
	.byte	-2
	.byte	120
	.byte	-51
	.byte	90
	.byte	-12
	.byte	31
	.byte	-35
	.byte	-88
	.byte	51
	.byte	-120
	.byte	7
	.byte	-57
	.byte	49
	.byte	-79
	.byte	18
	.byte	16
	.byte	89
	.byte	39
	.byte	-128
	.byte	-20
	.byte	95
	.byte	96
	.byte	81
	.byte	127
	.byte	-87
	.byte	25
	.byte	-75
	.byte	74
	.byte	13
	.byte	45
	.byte	-27
	.byte	122
	.byte	-97
	.byte	-109
	.byte	-55
	.byte	-100
	.byte	-17
	.byte	-96
	.byte	-32
	.byte	59
	.byte	77
	.byte	-82
	.byte	42
	.byte	-11
	.byte	-80
	.byte	-56
	.byte	-21
	.byte	-69
	.byte	60
	.byte	-125
	.byte	83
	.byte	-103
	.byte	97
	.byte	23
	.byte	43
	.byte	4
	.byte	126
	.byte	-70
	.byte	119
	.byte	-42
	.byte	38
	.byte	-31
	.byte	105
	.byte	20
	.byte	99
	.byte	85
	.byte	33
	.byte	12
	.byte	125
	.text
.global	tc_aes128_set_decrypt_key
	.type	tc_aes128_set_decrypt_key, @function
tc_aes128_set_decrypt_key:
	push r28
	push r29
	rcall .
	rcall .
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 4 */
/* stack size = 6 */
.L__stack_usage = 6
	std Y+2,r25
	std Y+1,r24
	std Y+4,r23
	std Y+3,r22
	ldd r18,Y+3
	ldd r19,Y+4
	ldd r24,Y+1
	ldd r25,Y+2
	movw r22,r18
	call tc_aes128_set_encrypt_key
/* epilogue start */
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop r29
	pop r28
	ret
	.size	tc_aes128_set_decrypt_key, .-tc_aes128_set_decrypt_key
	.type	mult_row_column, @function
mult_row_column:
	push r16
	push r17
	push r28
	push r29
	rcall .
	rcall .
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 4 */
/* stack size = 8 */
.L__stack_usage = 8
	std Y+2,r25
	std Y+1,r24
	std Y+4,r23
	std Y+3,r22
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	call _double_byte
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	call _double_byte
	mov r18,r16
	eor r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	eor r24,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	mov r18,r16
	eor r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	eor r24,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	eor r24,r18
	mov r18,r17
	eor r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	movw r30,r24
	st Z,r18
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	mov r17,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	eor r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	call _double_byte
	eor r24,r16
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	call _double_byte
	mov r18,r16
	eor r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	eor r24,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	mov r18,r16
	eor r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	eor r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,1
	eor r18,r17
	movw r30,r24
	st Z,r18
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	mov r18,r17
	eor r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	mov r17,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	eor r24,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	eor r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	call _double_byte
	eor r24,r16
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	call _double_byte
	mov r18,r16
	eor r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	eor r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,2
	eor r18,r17
	movw r30,r24
	st Z,r18
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	call _double_byte
	mov r18,r17
	eor r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	mov r17,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	mov r18,r16
	eor r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,1
	movw r30,r24
	ld r24,Z
	eor r24,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r18,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	eor r24,r18
	eor r17,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	call _double_byte
	mov r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	call _double_byte
	call _double_byte
	eor r16,r24
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,3
	movw r30,r24
	ld r24,Z
	call _double_byte
	mov r18,r16
	eor r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,3
	eor r18,r17
	movw r30,r24
	st Z,r18
	nop
/* epilogue start */
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop r29
	pop r28
	pop r17
	pop r16
	ret
	.size	mult_row_column, .-mult_row_column
	.type	inv_mix_columns, @function
inv_mix_columns:
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,18
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 18 */
/* stack size = 20 */
.L__stack_usage = 20
	std Y+18,r25
	std Y+17,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r22,r24
	movw r24,r28
	adiw r24,1
	call mult_row_column
	ldd r24,Y+17
	ldd r25,Y+18
	movw r18,r24
	subi r18,-4
	sbci r19,-1
	movw r24,r28
	adiw r24,5
	movw r22,r18
	call mult_row_column
	ldd r24,Y+17
	ldd r25,Y+18
	movw r18,r24
	subi r18,-8
	sbci r19,-1
	movw r24,r28
	adiw r24,9
	movw r22,r18
	call mult_row_column
	ldd r24,Y+17
	ldd r25,Y+18
	movw r18,r24
	subi r18,-12
	sbci r19,-1
	movw r24,r28
	adiw r24,13
	movw r22,r18
	call mult_row_column
	ldd r24,Y+17
	ldd r25,Y+18
	ldi r18,lo8(16)
	ldi r19,0
	movw r20,r28
	subi r20,-1
	sbci r21,-1
	ldi r22,lo8(16)
	ldi r23,0
	call _copy
	nop
/* epilogue start */
	adiw r28,18
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	ret
	.size	inv_mix_columns, .-inv_mix_columns
	.type	add_round_key, @function
add_round_key:
	push r28
	push r29
	rcall .
	rcall .
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 4 */
/* stack size = 6 */
.L__stack_usage = 6
	std Y+2,r25
	std Y+1,r24
	std Y+4,r23
	std Y+3,r22
	ldd r24,Y+1
	ldd r25,Y+2
	movw r30,r24
	ld r20,Z
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	ldi r18,lo8(24)
	ldi r19,0
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r18
	brpl 1b
	mov r18,r20
	eor r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,1
	movw r30,r24
	ld r20,Z
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	ldi r18,lo8(16)
	ldi r19,0
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r18
	brpl 1b
	mov r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,1
	eor r18,r20
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,2
	movw r30,r24
	ld r18,Z
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	mov r24,r25
	clr r25
	mov r19,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,2
	eor r18,r19
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,3
	movw r30,r24
	ld r18,Z
	ldd r24,Y+3
	ldd r25,Y+4
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	mov r19,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,3
	eor r18,r19
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,4
	movw r30,r24
	ld r20,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	ldi r18,lo8(24)
	ldi r19,0
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r18
	brpl 1b
	mov r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,4
	eor r18,r20
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,5
	movw r30,r24
	ld r20,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	ldi r18,lo8(16)
	ldi r19,0
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r18
	brpl 1b
	mov r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,5
	eor r18,r20
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,6
	movw r30,r24
	ld r18,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	mov r24,r25
	clr r25
	mov r19,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,6
	eor r18,r19
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,7
	movw r30,r24
	ld r18,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,2
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	mov r19,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,7
	eor r18,r19
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,8
	movw r30,r24
	ld r20,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,4
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	ldi r18,lo8(24)
	ldi r19,0
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r18
	brpl 1b
	mov r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,8
	eor r18,r20
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,9
	movw r30,r24
	ld r20,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,4
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	ldi r18,lo8(16)
	ldi r19,0
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r18
	brpl 1b
	mov r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,9
	eor r18,r20
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,10
	movw r30,r24
	ld r18,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,4
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	mov r24,r25
	clr r25
	mov r19,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,10
	eor r18,r19
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,11
	movw r30,r24
	ld r18,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,4
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	mov r19,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,11
	eor r18,r19
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,12
	movw r30,r24
	ld r20,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,6
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	ldi r18,lo8(24)
	ldi r19,0
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r18
	brpl 1b
	mov r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,12
	eor r18,r20
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,13
	movw r30,r24
	ld r20,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,6
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	ldi r18,lo8(16)
	ldi r19,0
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r18
	brpl 1b
	mov r18,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,13
	eor r18,r20
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,14
	movw r30,r24
	ld r18,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,6
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	mov r24,r25
	clr r25
	mov r19,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,14
	eor r18,r19
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,15
	movw r30,r24
	ld r18,Z
	ldd r24,Y+3
	ldd r25,Y+4
	adiw r24,6
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	mov r19,r24
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,15
	eor r18,r19
	movw r30,r24
	st Z,r18
	nop
/* epilogue start */
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop r29
	pop r28
	ret
	.size	add_round_key, .-add_round_key
	.type	inv_sub_bytes, @function
inv_sub_bytes:
	push r28
	push r29
	rcall .
	rcall .
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 4 */
/* stack size = 6 */
.L__stack_usage = 6
	std Y+4,r25
	std Y+3,r24
	std Y+2,__zero_reg__
	std Y+1,__zero_reg__
	rjmp .L7
.L8:
	ldd r18,Y+3
	ldd r19,Y+4
	ldd r24,Y+1
	ldd r25,Y+2
	add r24,r18
	adc r25,r19
	movw r30,r24
	ld r24,Z
	mov r18,r24
	ldi r19,0
	ldd r20,Y+3
	ldd r21,Y+4
	ldd r24,Y+1
	ldd r25,Y+2
	add r24,r20
	adc r25,r21
	subi r18,lo8(-(inv_sbox))
	sbci r19,hi8(-(inv_sbox))
	movw r30,r18
	ld r18,Z
	movw r30,r24
	st Z,r18
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,1
	std Y+2,r25
	std Y+1,r24
.L7:
	ldd r24,Y+1
	ldd r25,Y+2
	sbiw r24,16
	brlo .L8
	nop
/* epilogue start */
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop r29
	pop r28
	ret
	.size	inv_sub_bytes, .-inv_sub_bytes
	.type	inv_shift_rows, @function
inv_shift_rows:
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,18
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 18 */
/* stack size = 20 */
.L__stack_usage = 20
	std Y+18,r25
	std Y+17,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ld r24,Z
	std Y+1,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+13
	std Y+2,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+10
	std Y+3,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+7
	std Y+4,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+4
	std Y+5,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+1
	std Y+6,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+14
	std Y+7,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+11
	std Y+8,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+8
	std Y+9,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+5
	std Y+10,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+2
	std Y+11,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+15
	std Y+12,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+12
	std Y+13,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+9
	std Y+14,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+6
	std Y+15,r24
	ldd r24,Y+17
	ldd r25,Y+18
	movw r30,r24
	ldd r24,Z+3
	std Y+16,r24
	ldd r24,Y+17
	ldd r25,Y+18
	ldi r18,lo8(16)
	ldi r19,0
	movw r20,r28
	subi r20,-1
	sbci r21,-1
	ldi r22,lo8(16)
	ldi r23,0
	call _copy
	nop
/* epilogue start */
	adiw r28,18
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	ret
	.size	inv_shift_rows, .-inv_shift_rows
.global	tc_aes_decrypt
	.type	tc_aes_decrypt, @function
tc_aes_decrypt:
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,24
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 24 */
/* stack size = 26 */
.L__stack_usage = 26
	std Y+20,r25
	std Y+19,r24
	std Y+22,r23
	std Y+21,r22
	std Y+24,r21
	std Y+23,r20
	ldd r24,Y+19
	ldd r25,Y+20
	or r24,r25
	brne .L11
	ldi r24,0
	ldi r25,0
	rjmp .L17
.L11:
	ldd r24,Y+21
	ldd r25,Y+22
	or r24,r25
	brne .L13
	ldi r24,0
	ldi r25,0
	rjmp .L17
.L13:
	ldd r24,Y+23
	ldd r25,Y+24
	or r24,r25
	brne .L14
	ldi r24,0
	ldi r25,0
	rjmp .L17
.L14:
	ldd r20,Y+21
	ldd r21,Y+22
	movw r24,r28
	adiw r24,3
	ldi r18,lo8(16)
	ldi r19,0
	ldi r22,lo8(16)
	ldi r23,0
	call _copy
	ldd r24,Y+23
	ldd r25,Y+24
	movw r18,r24
	subi r18,-80
	sbci r19,-1
	movw r24,r28
	adiw r24,3
	movw r22,r18
	call add_round_key
	ldi r24,lo8(9)
	ldi r25,0
	std Y+2,r25
	std Y+1,r24
	rjmp .L15
.L16:
	movw r24,r28
	adiw r24,3
	call inv_shift_rows
	movw r24,r28
	adiw r24,3
	call inv_sub_bytes
	ldd r18,Y+23
	ldd r19,Y+24
	ldd r24,Y+1
	ldd r25,Y+2
	lsl r24
	rol r25
	lsl r24
	rol r25
	lsl r24
	rol r25
	add r18,r24
	adc r19,r25
	movw r24,r28
	adiw r24,3
	movw r22,r18
	call add_round_key
	movw r24,r28
	adiw r24,3
	call inv_mix_columns
	ldd r24,Y+1
	ldd r25,Y+2
	sbiw r24,1
	std Y+2,r25
	std Y+1,r24
.L15:
	ldd r24,Y+1
	ldd r25,Y+2
	or r24,r25
	brne .L16
	movw r24,r28
	adiw r24,3
	call inv_shift_rows
	movw r24,r28
	adiw r24,3
	call inv_sub_bytes
	ldd r18,Y+23
	ldd r19,Y+24
	movw r24,r28
	adiw r24,3
	movw r22,r18
	call add_round_key
	movw r20,r28
	subi r20,-3
	sbci r21,-1
	ldd r24,Y+19
	ldd r25,Y+20
	ldi r18,lo8(16)
	ldi r19,0
	ldi r22,lo8(16)
	ldi r23,0
	call _copy
	movw r24,r28
	adiw r24,3
	ldi r20,lo8(16)
	ldi r21,0
	ldi r22,0
	call _set
	ldi r24,lo8(1)
	ldi r25,0
.L17:
/* epilogue start */
	adiw r28,24
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	ret
	.size	tc_aes_decrypt, .-tc_aes_decrypt
	.ident	"GCC: (GNU) 7.3.0"
.global __do_copy_data
