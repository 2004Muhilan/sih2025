	.file	"tinycrypt_ecc_dsa.c"
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__SREG__ = 0x3f
__tmp_reg__ = 0
__zero_reg__ = 1
	.text
	.type	bits2int, @function
bits2int:
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
/* prologue: function */
/* frame size = 0 */
/* stack size = 10 */
.L__stack_usage = 10
	movw r28,r24
	movw r10,r22
	movw r14,r18
	movw r30,r18
	ldd r24,Z+2
	ldd r25,Z+3
	movw r16,r24
	subi r16,-31
	sbci r17,-1
	sbrs r17,7
	rjmp .L2
	subi r16,-31
	sbci r17,-1
.L2:
	asr r17
	ror r16
	asr r17
	ror r16
	asr r17
	ror r16
	asr r17
	ror r16
	asr r17
	ror r16
	movw r12,r24
	ldi r31,7
	add r12,r31
	adc r13,__zero_reg__
	sbrs r13,7
	rjmp .L3
	movw r12,r24
	ldi r18,14
	add r12,r18
	adc r13,__zero_reg__
.L3:
	asr r13
	ror r12
	asr r13
	ror r12
	asr r13
	ror r12
	cp r20,r12
	cpc r21,r13
	brsh .L4
	movw r12,r20
.L4:
	mov r22,r16
	movw r24,r28
	call uECC_vli_clear
	movw r20,r12
	movw r22,r10
	movw r24,r28
	call uECC_vli_bytesToNative
	lsl r12
	rol r13
	lsl r12
	rol r13
	lsl r12
	rol r13
	movw r30,r14
	ldd r24,Z+2
	ldd r25,Z+3
	cp r24,r12
	cpc r25,r13
	brlo .+2
	rjmp .L1
	sub r12,r24
	sbc r13,r25
	movw r30,r16
	lsl r30
	rol r31
	add r30,r28
	adc r31,r29
	cp r28,r30
	cpc r29,r31
	brsh .L7
	ldi r20,lo8(32)
	ldi r21,0
	sub r20,r12
	sbc r21,r13
	ldi r23,0
	ldi r22,0
.L8:
	ld r19,-Z
	ld r18,-Z
	movw r24,r18
	mov r0,r12
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r0
	brpl 1b
	or r24,r22
	or r25,r23
	std Z+1,r25
	st Z,r24
	movw r22,r18
	mov r0,r20
	rjmp 2f
	1:
	lsl r22
	rol r23
	2:
	dec r0
	brpl 1b
	cp r28,r30
	cpc r29,r31
	brlo .L8
.L7:
	ldi r31,20
	add r14,r31
	adc r15,__zero_reg__
	mov r20,r16
	movw r22,r28
	movw r24,r14
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L1
	mov r18,r16
	movw r20,r14
	movw r22,r28
	movw r24,r28
/* epilogue start */
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	jmp uECC_vli_sub
.L1:
/* epilogue start */
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	ret
	.size	bits2int, .-bits2int
.global	uECC_sign_with_k
	.type	uECC_sign_with_k, @function
uECC_sign_with_k:
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,78
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 78 */
/* stack size = 95 */
.L__stack_usage = 95
	adiw r28,69-62
	std Y+63,r25
	std Y+62,r24
	sbiw r28,69-62
	adiw r28,71-62
	std Y+63,r23
	std Y+62,r22
	sbiw r28,71-62
	adiw r28,73-62
	std Y+63,r21
	std Y+62,r20
	sbiw r28,73-62
	movw r10,r18
	movw r4,r16
	movw r12,r14
	movw r6,r28
	ldi r18,49
	add r6,r18
	adc r7,__zero_reg__
	adiw r28,65-62
	std Y+63,r7
	std Y+62,r6
	sbiw r28,65-62
	movw r8,r28
	ldi r19,33
	add r8,r19
	adc r9,__zero_reg__
	adiw r28,67-62
	std Y+63,r9
	std Y+62,r8
	sbiw r28,67-62
	movw r30,r14
	ld r3,Z
	ldd r16,Z+2
	ldd r17,Z+3
	mov r22,r3
	movw r24,r10
	call uECC_vli_isZero
	or r24,r25
	breq .L16
.L19:
	ldi r25,0
	ldi r24,0
.L15:
/* epilogue start */
	subi r28,-78
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	ret
.L16:
	movw r24,r16
	adiw r24,31
	sbrc r25,7
	adiw r24,31
.L18:
	movw r18,r24
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	adiw r28,75-62
	std Y+63,r19
	std Y+62,r18
	sbiw r28,75-62
	movw r24,r12
	adiw r24,20
	adiw r28,77-62
	std Y+63,r25
	std Y+62,r24
	sbiw r28,77-62
	adiw r28,75-63
	ldd r20,Y+63
	sbiw r28,75-63
	movw r22,r10
	call uECC_vli_cmp
	cpi r24,lo8(1)
	brne .L19
	movw r18,r12
	movw r20,r8
	movw r22,r6
	movw r24,r10
	call regularize_k
	subi r16,-1
	sbci r17,-1
	ldi r30,lo8(1)
	ldi r31,0
	or r24,r25
	breq .+2
	rjmp .L30
.L20:
	lsl r30
	rol r31
	ldi r18,lo8(65)
	ldi r19,0
	add r18,r28
	adc r19,r29
	add r30,r18
	adc r31,r19
	ld r20,Z
	ldd r21,Z+1
	movw r14,r12
	ldi r19,0
	ldi r18,0
	movw r22,r12
	subi r22,-36
	sbci r23,-1
	movw r24,r28
	adiw r24,1
	call EccPoint_mult
	mov r22,r3
	movw r24,r28
	adiw r24,1
	call uECC_vli_isZero
	or r24,r25
	breq .+2
	rjmp .L19
	call uECC_get_rng
	or r24,r25
	brne .+2
	rjmp .L31
	adiw r28,75-63
	ldd r20,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,77-62
	movw r24,r6
	call uECC_generate_random_int
	or r24,r25
	brne .+2
	rjmp .L19
.L22:
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r6
	movw r22,r10
	movw r24,r10
	call uECC_vli_modMult
	adiw r28,75-63
	ldd r18,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r20,Y+62
	ldd r21,Y+63
	sbiw r28,77-62
	movw r22,r10
	movw r24,r10
	call uECC_vli_modInv
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r6
	movw r22,r10
	movw r24,r10
	call uECC_vli_modMult
	movw r30,r12
	ldd r22,Z+1
	mov __tmp_reg__,r22
	lsl r0
	sbc r23,r23
	movw r20,r28
	subi r20,-1
	sbci r21,-1
	movw r24,r4
	call uECC_vli_nativeToBytes
	movw r30,r12
	ldd r24,Z+2
	ldd r25,Z+3
	movw r20,r24
	subi r20,-7
	sbci r21,-1
	sbrs r21,7
	rjmp .L23
	subi r20,-7
	sbci r21,-1
.L23:
	asr r21
	ror r20
	asr r21
	ror r20
	asr r21
	ror r20
	adiw r28,69-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,69-62
	movw r24,r6
	call uECC_vli_bytesToNative
	adiw r28,75-63
	ldd r18,Y+63
	sbiw r28,75-63
	mov r30,r18
	lsl r18
	sbc r31,r31
	sbiw r30,1
	lsl r30
	rol r31
	ldi r24,lo8(1)
	ldi r25,0
	add r24,r28
	adc r25,r29
	add r30,r24
	adc r31,r25
	std Z+33,__zero_reg__
	std Z+32,__zero_reg__
	mov r20,r3
	movw r22,r24
	movw r24,r8
	call uECC_vli_set
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r8
	movw r22,r6
	movw r24,r8
	call uECC_vli_modMult
	movw r18,r12
	adiw r28,73-62
	ldd r20,Y+62
	ldd r21,Y+63
	sbiw r28,73-62
	adiw r28,71-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,71-62
	movw r24,r6
	call bits2int
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r8
	movw r22,r6
	movw r24,r8
	call uECC_vli_modAdd
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r10
	movw r22,r8
	movw r24,r8
	call uECC_vli_modMult
	adiw r28,75-63
	ldd r22,Y+63
	sbiw r28,75-63
	movw r24,r8
	call uECC_vli_numBits
	movw r30,r12
	ldd r18,Z+1
	mov __tmp_reg__,r18
	lsl r0
	sbc r19,r19
	movw r20,r18
	lsl r20
	rol r21
	lsl r20
	rol r21
	lsl r20
	rol r21
	cp r20,r24
	cpc r21,r25
	brge .+2
	rjmp .L19
	movw r20,r8
	movw r22,r18
	movw r24,r4
	add r24,r18
	adc r25,r19
	call uECC_vli_nativeToBytes
	ldi r24,lo8(1)
	ldi r25,0
	rjmp .L15
.L30:
	ldi r31,0
	ldi r30,0
	rjmp .L20
.L31:
	adiw r28,75-63
	ldd r22,Y+63
	sbiw r28,75-63
	movw r24,r6
	call uECC_vli_clear
	ldi r24,lo8(1)
	ldi r25,0
	std Y+50,r25
	std Y+49,r24
	rjmp .L22
	.size	uECC_sign_with_k, .-uECC_sign_with_k
.global	uECC_sign
	.type	uECC_sign, @function
uECC_sign:
	push r2
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,50
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 50 */
/* stack size = 68 */
.L__stack_usage = 68
	movw r6,r24
	std Y+50,r23
	std Y+49,r22
	movw r4,r20
	movw r2,r18
	movw r10,r16
	ldi r25,lo8(64)
	mov r12,r25
	mov r13,__zero_reg__
	movw r8,r16
	ldi r24,20
	add r8,r24
	adc r9,__zero_reg__
	rjmp .L36
.L45:
	ldi r22,lo8(64)
	ldi r23,0
	movw r24,r28
	adiw r24,1
	icall
	or r24,r25
	breq .L33
	movw r30,r10
	ldd r24,Z+2
	ldd r25,Z+3
	movw r18,r24
	subi r18,-31
	sbci r19,-1
	sbrs r19,7
	rjmp .L34
	subi r18,-31
	sbci r19,-1
.L34:
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	movw r20,r8
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r28
	adiw r24,33
	call uECC_vli_mmod
	movw r14,r10
	movw r16,r2
	movw r18,r28
	subi r18,-33
	sbci r19,-1
	movw r20,r4
	ldd r22,Y+49
	ldd r23,Y+50
	movw r24,r6
	call uECC_sign_with_k
	or r24,r25
	brne .L37
	ldi r31,1
	sub r12,r31
	sbc r13,__zero_reg__
	breq .L33
.L36:
	call uECC_get_rng
	movw r30,r24
	or r24,r25
	brne .L45
.L33:
	ldi r25,0
	ldi r24,0
.L32:
/* epilogue start */
	adiw r28,50
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	pop r2
	ret
.L37:
	ldi r24,lo8(1)
	ldi r25,0
	rjmp .L32
	.size	uECC_sign, .-uECC_sign
.global	uECC_verify
	.type	uECC_verify, @function
uECC_verify:
	push r2
	push r3
	push r4
	push r5
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,-20
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 236 */
/* stack size = 253 */
.L__stack_usage = 253
	movw r10,r24
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	std Y+1,r23
	st Y,r22
	subi r28,lo8(233)
	sbci r29,hi8(233)
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	std Y+1,r21
	st Y,r20
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r12,r18
	movw r14,r16
	movw r26,r16
	ld r7,X
	adiw r26,2
	ld r18,X+
	ld r19,X
	movw r4,r18
	ldi r27,31
	add r4,r27
	adc r5,__zero_reg__
	sbrs r5,7
	rjmp .L47
	movw r4,r18
	ldi r30,62
	add r4,r30
	adc r5,__zero_reg__
.L47:
	asr r5
	ror r4
	asr r5
	ror r4
	asr r5
	ror r4
	asr r5
	ror r4
	asr r5
	ror r4
	mov r16,r4
	mov __tmp_reg__,r4
	lsl r0
	sbc r17,r17
	subi r16,1
	sbc r17,__zero_reg__
	lsl r16
	rol r17
	ldi r30,lo8(-95)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	ldi r30,lo8(81)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	ldi r30,lo8(65)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	movw r26,r14
	adiw r26,1
	ld r20,X
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r10
	movw r24,r28
	adiw r24,1
	call uECC_vli_bytesToNative
	movw r30,r14
	ldd r20,Z+1
	mov r8,r7
	lsl r8
	sbc r9,r9
	clr r2
	inc r2
	mov r3,__zero_reg__
	add r2,r28
	adc r3,r29
	add r2,r8
	adc r3,r9
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r10
	add r22,r20
	adc r23,r21
	movw r24,r2
	call uECC_vli_bytesToNative
	movw r26,r14
	adiw r26,1
	ld r20,X
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r12
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	call uECC_vli_bytesToNative
	movw r30,r14
	ldd r20,Z+1
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r12
	add r22,r20
	adc r23,r21
	movw r24,r28
	subi r24,-65
	sbci r25,-1
	call uECC_vli_bytesToNative
	mov r22,r7
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	call uECC_vli_isZero
	or r24,r25
	breq .L48
.L50:
	ldi r24,0
	ldi r25,0
.L46:
/* epilogue start */
	subi r28,20
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r5
	pop r4
	pop r3
	pop r2
	ret
.L48:
	mov r22,r7
	movw r24,r28
	subi r24,-65
	sbci r25,-1
	call uECC_vli_isZero
	or r24,r25
	brne .L50
	movw r12,r14
	ldi r31,20
	add r12,r31
	adc r13,__zero_reg__
	mov r20,r4
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r12
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	brne .L50
	mov r20,r4
	movw r22,r28
	subi r22,-65
	sbci r23,-1
	movw r24,r12
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	brne .L50
	mov r18,r4
	movw r20,r12
	movw r22,r28
	subi r22,-65
	sbci r23,-1
	movw r24,r28
	subi r24,79
	sbci r25,-1
	call uECC_vli_modInv
	ldi r30,lo8(-47)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	movw r18,r14
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r20,Y
	ldd r21,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call bits2int
	mov r16,r4
	movw r18,r12
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,47
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult
	movw r18,r12
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r28
	subi r24,63
	sbci r25,-1
	call uECC_vli_modMult
	movw r10,r28
	ldi r24,33
	add r10,r24
	adc r11,__zero_reg__
	mov r20,r7
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r10
	call uECC_vli_set
	movw r26,r10
	add r26,r8
	adc r27,r9
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	std Y+1,r27
	st Y,r26
	subi r28,lo8(235)
	sbci r29,hi8(235)
	mov r20,r7
	movw r22,r2
	movw r24,r26
	call uECC_vli_set
	mov r20,r7
	movw r30,r14
	adiw r30,36
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	std Y+1,r31
	st Y,r30
	subi r28,lo8(233)
	sbci r29,hi8(233)
	movw r22,r30
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call uECC_vli_set
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	add r22,r8
	adc r23,r9
	mov r20,r7
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call uECC_vli_set
	movw r2,r14
	ldi r31,4
	add r2,r31
	adc r3,__zero_reg__
	mov r16,r7
	movw r18,r2
	movw r20,r28
	subi r20,127
	sbci r21,-1
	movw r22,r10
	movw r24,r28
	subi r24,79
	sbci r25,-1
	call uECC_vli_modSub
	movw r16,r14
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r18,Y
	ldd r19,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r20,r10
	movw r22,r28
	subi r22,-113
	sbci r23,-1
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call XYcZ_add
	mov r18,r7
	movw r20,r2
	movw r22,r28
	subi r22,79
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modInv
	movw r18,r14
	movw r20,r28
	subi r20,79
	sbci r21,-1
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r24,r10
	call apply_z
	subi r28,lo8(-225)
	sbci r29,hi8(-225)
	std Y+1,__zero_reg__
	st Y,__zero_reg__
	subi r28,lo8(225)
	sbci r29,hi8(225)
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r24,Y
	ldd r25,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	subi r28,lo8(-227)
	sbci r29,hi8(-227)
	std Y+1,r25
	st Y,r24
	subi r28,lo8(227)
	sbci r29,hi8(227)
	ldi r26,lo8(1)
	ldi r27,0
	add r26,r28
	adc r27,r29
	subi r28,lo8(-229)
	sbci r29,hi8(-229)
	std Y+1,r27
	st Y,r26
	subi r28,lo8(229)
	sbci r29,hi8(229)
	subi r28,lo8(-231)
	sbci r29,hi8(-231)
	std Y+1,r11
	st Y,r10
	subi r28,lo8(231)
	sbci r29,hi8(231)
	mov r22,r4
	movw r24,r28
	subi r24,63
	sbci r25,-1
	call uECC_vli_numBits
	movw r16,r24
	mov r22,r4
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call uECC_vli_numBits
	movw r10,r16
	cp r16,r24
	cpc r17,r25
	brge .L51
	movw r10,r24
.L51:
	movw r30,r10
	sbiw r30,1
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	std Y+1,r31
	st Y,r30
	subi r28,lo8(233)
	sbci r29,hi8(233)
	movw r22,r30
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call uECC_vli_testBit
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	brne .L52
	ldi r19,0
.L52:
	mov r16,r19
	mov r17,r18
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	movw r24,r28
	subi r24,63
	sbci r25,-1
	call uECC_vli_testBit
	or r24,r25
	breq .L53
	ori r16,2
.L53:
	lsl r16
	rol r17
	ldi r30,lo8(-31)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	ld r16,Z
	ldd r17,Z+1
	mov r20,r7
	movw r22,r16
	movw r24,r28
	subi r24,95
	sbci r25,-1
	call uECC_vli_set
	movw r22,r16
	add r22,r8
	adc r23,r9
	mov r20,r7
	movw r24,r28
	subi r24,111
	sbci r25,-1
	call uECC_vli_set
	mov r22,r7
	movw r24,r28
	subi r24,79
	sbci r25,-1
	call uECC_vli_clear
	ldi r24,lo8(1)
	ldi r25,0
	subi r28,lo8(-177)
	sbci r29,hi8(-177)
	std Y+1,r25
	st Y,r24
	subi r28,lo8(177)
	sbci r29,hi8(177)
	ldi r31,2
	sub r10,r31
	sbc r11,__zero_reg__
	sbrc r11,7
	rjmp .L54
	movw r24,r14
	subi r24,-84
	sbci r25,-1
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	std Y+1,r25
	st Y,r24
	subi r28,lo8(233)
	sbci r29,hi8(233)
.L58:
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r26,Y
	ldd r27,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	ld r30,X+
	ld r31,X
	movw r18,r14
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,111
	sbci r23,-1
	movw r24,r28
	subi r24,95
	sbci r25,-1
	icall
	movw r22,r10
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call uECC_vli_testBit
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	brne .L55
	ldi r19,0
.L55:
	mov r16,r19
	mov r17,r18
	movw r22,r10
	movw r24,r28
	subi r24,63
	sbci r25,-1
	call uECC_vli_testBit
	or r24,r25
	breq .L56
	ori r16,2
.L56:
	lsl r16
	rol r17
	ldi r30,lo8(-31)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	ld r16,Z
	ldd r17,Z+1
	cp r16,__zero_reg__
	cpc r17,__zero_reg__
	brne .+2
	rjmp .L57
	mov r20,r7
	movw r22,r16
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call uECC_vli_set
	movw r22,r16
	add r22,r8
	adc r23,r9
	mov r20,r7
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call uECC_vli_set
	movw r18,r14
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,-113
	sbci r23,-1
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call apply_z
	mov r16,r7
	movw r18,r2
	movw r20,r28
	subi r20,127
	sbci r21,-1
	movw r22,r28
	subi r22,95
	sbci r23,-1
	movw r24,r28
	subi r24,-97
	sbci r25,-1
	call uECC_vli_modSub
	movw r16,r14
	movw r18,r28
	subi r18,111
	sbci r19,-1
	movw r20,r28
	subi r20,95
	sbci r21,-1
	movw r22,r28
	subi r22,-113
	sbci r23,-1
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call XYcZ_add
	movw r18,r14
	movw r20,r28
	subi r20,-97
	sbci r21,-1
	movw r22,r28
	subi r22,79
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult_fast
.L57:
	ldi r27,1
	sub r10,r27
	sbc r11,__zero_reg__
	brcs .+2
	rjmp .L58
.L54:
	mov r18,r7
	movw r20,r2
	movw r22,r28
	subi r22,79
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modInv
	movw r18,r14
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,111
	sbci r23,-1
	movw r24,r28
	subi r24,95
	sbci r25,-1
	call apply_z
	mov r20,r4
	movw r22,r28
	subi r22,95
	sbci r23,-1
	movw r24,r12
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L59
	mov r18,r4
	movw r20,r12
	movw r22,r28
	subi r22,95
	sbci r23,-1
	movw r24,r22
	call uECC_vli_sub
.L59:
	mov r20,r7
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r28
	subi r24,95
	sbci r25,-1
	call uECC_vli_equal
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	breq .L60
	ldi r19,0
.L60:
	mov r24,r19
	mov r25,r18
	rjmp .L46
	.size	uECC_verify, .-uECC_verify
	.ident	"GCC: (GNU) 7.3.0"
