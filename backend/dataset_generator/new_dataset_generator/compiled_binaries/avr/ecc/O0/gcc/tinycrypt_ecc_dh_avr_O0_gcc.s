	.file	"tinycrypt_ecc_dh.c"
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__SREG__ = 0x3f
__tmp_reg__ = 0
__zero_reg__ = 1
	.text
	.section	.rodata
	.type	curve_secp256r1, @object
	.size	curve_secp256r1, 90
curve_secp256r1:
	.byte	8
	.byte	32
	.word	256
	.word	-1
	.word	-1
	.word	-1
	.word	0
	.word	0
	.word	0
	.word	1
	.word	-1
	.word	9553
	.word	-13630
	.word	-24956
	.word	-1363
	.word	-1
	.word	-1
	.word	0
	.word	-1
	.word	-15722
	.word	14661
	.word	13216
	.word	32129
	.word	16626
	.word	-6427
	.word	16967
	.word	-11790
	.word	20981
	.word	16488
	.word	24270
	.word	13143
	.word	-25066
	.word	-5302
	.word	32667
	.word	17122
	.word	24651
	.word	15422
	.word	-20234
	.word	1712
	.word	-31044
	.word	-17067
	.word	-27673
	.word	13784
	.word	gs(double_jacobian_default)
	.word	gs(x_side_default)
	.word	gs(vli_mmod_fast_secp256r1)
	.text
	.type	_set_secure, @function
_set_secure:
	push r28
	push r29
	rcall .
	rcall .
	push __zero_reg__
	in r28,__SP_L__
	in r29,__SP_H__
/* prologue: function */
/* frame size = 5 */
/* stack size = 7 */
.L__stack_usage = 7
	std Y+2,r25
	std Y+1,r24
	std Y+3,r22
	std Y+5,r21
	std Y+4,r20
	ldd r24,Y+3
	mov r18,r24
	ldi r19,0
	ldd r20,Y+4
	ldd r21,Y+5
	ldd r24,Y+1
	ldd r25,Y+2
	movw r22,r18
	call memset
	nop
/* epilogue start */
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop __tmp_reg__
	pop r29
	pop r28
	ret
	.size	_set_secure, .-_set_secure
.global	uECC_make_key_with_d
	.type	uECC_make_key_with_d, @function
uECC_make_key_with_d:
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,56
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 56 */
/* stack size = 58 */
.L__stack_usage = 58
	std Y+50,r25
	std Y+49,r24
	std Y+52,r23
	std Y+51,r22
	std Y+54,r21
	std Y+53,r20
	std Y+56,r19
	std Y+55,r18
	ldd r24,Y+53
	ldd r25,Y+54
	ldi r20,lo8(32)
	ldi r21,0
	movw r22,r24
	movw r24,r28
	adiw r24,1
	call memcpy
	ldd r18,Y+55
	ldd r19,Y+56
	movw r24,r28
	adiw r24,17
	movw r20,r18
	movw r18,r28
	subi r18,-1
	sbci r19,-1
	movw r22,r18
	call EccPoint_compute_public_key
	or r24,r25
	brne .+2
	rjmp .L3
	ldd r24,Y+55
	ldd r25,Y+56
	movw r30,r24
	ldd r24,Z+2
	ldd r25,Z+3
	adiw r24,7
	tst r25
	brge .L4
	adiw r24,7
.L4:
	asr r25
	ror r24
	asr r25
	ror r24
	asr r25
	ror r24
	movw r22,r24
	ldd r24,Y+51
	ldd r25,Y+52
	movw r18,r28
	subi r18,-1
	sbci r19,-1
	movw r20,r18
	call uECC_vli_nativeToBytes
	ldd r24,Y+55
	ldd r25,Y+56
	movw r30,r24
	ldd r24,Z+1
	mov r18,r24
	lsl r24
	sbc r19,r19
	movw r20,r28
	subi r20,-17
	sbci r21,-1
	ldd r24,Y+49
	ldd r25,Y+50
	movw r22,r18
	call uECC_vli_nativeToBytes
	ldd r24,Y+55
	ldd r25,Y+56
	movw r30,r24
	ld r24,Z
	mov __tmp_reg__,r24
	lsl r0
	sbc r25,r25
	lsl r24
	rol r25
	movw r18,r28
	subi r18,-17
	sbci r19,-1
	movw r20,r18
	add r20,r24
	adc r21,r25
	ldd r24,Y+55
	ldd r25,Y+56
	movw r30,r24
	ldd r24,Z+1
	mov r22,r24
	lsl r24
	sbc r23,r23
	ldd r24,Y+55
	ldd r25,Y+56
	movw r30,r24
	ldd r24,Z+1
	mov __tmp_reg__,r24
	lsl r0
	sbc r25,r25
	ldd r18,Y+49
	ldd r19,Y+50
	add r24,r18
	adc r25,r19
	call uECC_vli_nativeToBytes
	ldi r20,lo8(32)
	ldi r21,0
	ldi r22,0
	movw r24,r28
	adiw r24,1
	call _set_secure
	ldi r24,lo8(1)
	ldi r25,0
	rjmp .L6
.L3:
	ldi r24,0
	ldi r25,0
.L6:
/* epilogue start */
	adiw r28,56
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	ret
	.size	uECC_make_key_with_d, .-uECC_make_key_with_d
.global	uECC_make_key
	.type	uECC_make_key, @function
uECC_make_key:
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,90
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 90 */
/* stack size = 92 */
.L__stack_usage = 92
	movw r18,r28
	subi r18,-85
	sbci r19,-1
	movw r30,r18
	std Z+1,r25
	st Z,r24
	movw r24,r28
	subi r24,-87
	sbci r25,-1
	movw r30,r24
	std Z+1,r23
	st Z,r22
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	std Z+1,r21
	st Z,r20
	std Y+2,__zero_reg__
	std Y+1,__zero_reg__
	rjmp .L8
.L15:
	call uECC_get_rng
	std Y+4,r25
	std Y+3,r24
	ldd r24,Y+3
	ldd r25,Y+4
	or r24,r25
	breq .L9
	movw r24,r28
	adiw r24,5
	ldd r18,Y+3
	ldd r19,Y+4
	ldi r22,lo8(64)
	ldi r23,0
	movw r30,r18
	icall
	or r24,r25
	brne .L10
.L9:
	ldi r24,0
	ldi r25,0
	rjmp .L16
.L10:
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	ldd r24,Z+2
	ldd r25,Z+3
	adiw r24,31
	tst r25
	brge .L12
	adiw r24,31
.L12:
	asr r25
	ror r24
	asr r25
	ror r24
	asr r25
	ror r24
	asr r25
	ror r24
	asr r25
	ror r24
	mov r18,r24
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r20,r24
	subi r20,-20
	sbci r21,-1
	movw r22,r28
	subi r22,-5
	sbci r23,-1
	movw r24,r28
	adiw r24,37
	call uECC_vli_mmod
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	ld r20,Z
	ldd r21,Z+1
	movw r18,r28
	subi r18,-37
	sbci r19,-1
	movw r24,r28
	adiw r24,53
	movw r22,r18
	call EccPoint_compute_public_key
	or r24,r25
	brne .+2
	rjmp .L13
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	ldd r24,Z+2
	ldd r25,Z+3
	adiw r24,7
	tst r25
	brge .L14
	adiw r24,7
.L14:
	asr r25
	ror r24
	asr r25
	ror r24
	asr r25
	ror r24
	movw r22,r24
	movw r18,r28
	subi r18,-37
	sbci r19,-1
	movw r24,r28
	subi r24,-87
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r20,r18
	call uECC_vli_nativeToBytes
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	ldd r24,Z+1
	mov r18,r24
	lsl r24
	sbc r19,r19
	movw r20,r28
	subi r20,-53
	sbci r21,-1
	movw r24,r28
	subi r24,-85
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r22,r18
	call uECC_vli_nativeToBytes
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	ld r24,Z
	mov __tmp_reg__,r24
	lsl r0
	sbc r25,r25
	lsl r24
	rol r25
	movw r18,r28
	subi r18,-53
	sbci r19,-1
	movw r20,r18
	add r20,r24
	adc r21,r25
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	ldd r24,Z+1
	mov r22,r24
	lsl r24
	sbc r23,r23
	movw r24,r28
	subi r24,-89
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r30,r24
	ldd r24,Z+1
	mov __tmp_reg__,r24
	lsl r0
	sbc r25,r25
	movw r18,r28
	subi r18,-85
	sbci r19,-1
	movw r30,r18
	ld r18,Z
	ldd r19,Z+1
	add r24,r18
	adc r25,r19
	call uECC_vli_nativeToBytes
	movw r24,r28
	adiw r24,37
	ldi r20,lo8(32)
	ldi r21,0
	ldi r22,0
	call _set_secure
	ldi r24,lo8(1)
	ldi r25,0
	rjmp .L16
.L13:
	ldd r24,Y+1
	ldd r25,Y+2
	adiw r24,1
	std Y+2,r25
	std Y+1,r24
.L8:
	ldd r24,Y+1
	ldd r25,Y+2
	cpi r24,64
	cpc r25,__zero_reg__
	brsh .+2
	rjmp .L15
	ldi r24,0
	ldi r25,0
.L16:
/* epilogue start */
	subi r28,-90
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	ret
	.size	uECC_make_key, .-uECC_make_key
.global	uECC_shared_secret
	.type	uECC_shared_secret, @function
uECC_shared_secret:
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,86
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 86 */
/* stack size = 92 */
.L__stack_usage = 92
	movw r30,r28
	subi r30,-77
	sbci r31,-1
	std Z+1,r25
	st Z,r24
	movw r24,r28
	subi r24,-79
	sbci r25,-1
	movw r26,r24
	st X+,r22
	st X,r23
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	movw r30,r24
	std Z+1,r21
	st Z,r20
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r26,r24
	st X+,r18
	st X,r19
	movw r24,r28
	subi r24,-73
	sbci r25,-1
	movw r18,r28
	subi r18,-41
	sbci r19,-1
	movw r30,r24
	std Z+1,r19
	st Z,r18
	movw r24,r28
	subi r24,-73
	sbci r25,-1
	movw r18,r28
	subi r18,-57
	sbci r19,-1
	movw r26,r24
	adiw r26,2+1
	st X,r19
	st -X,r18
	sbiw r26,2
	std Y+2,__zero_reg__
	std Y+1,__zero_reg__
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r26,r24
	ld r24,X
	std Y+5,r24
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r26,r24
	adiw r26,1
	ld r24,X
	std Y+6,r24
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r26,r24
	adiw r26,2
	ld r24,X+
	ld r25,X
	adiw r24,7
	tst r25
	brge .L18
	adiw r24,7
.L18:
	asr r25
	ror r24
	asr r25
	ror r24
	asr r25
	ror r24
	movw r20,r24
	movw r24,r28
	subi r24,-79
	sbci r25,-1
	movw r30,r24
	ld r18,Z
	ldd r19,Z+1
	movw r24,r28
	adiw r24,41
	movw r22,r18
	call uECC_vli_bytesToNative
	ldd r24,Y+6
	mov r20,r24
	lsl r24
	sbc r21,r21
	movw r24,r28
	subi r24,-77
	sbci r25,-1
	movw r26,r24
	ld r18,X+
	ld r19,X
	movw r24,r28
	adiw r24,9
	movw r22,r18
	call uECC_vli_bytesToNative
	ldd r24,Y+6
	mov r20,r24
	lsl r24
	sbc r21,r21
	ldd r24,Y+6
	mov __tmp_reg__,r24
	lsl r0
	sbc r25,r25
	movw r18,r28
	subi r18,-77
	sbci r19,-1
	movw r30,r18
	ld r18,Z
	ldd r19,Z+1
	movw r22,r18
	add r22,r24
	adc r23,r25
	ldd r24,Y+5
	mov __tmp_reg__,r24
	lsl r0
	sbc r25,r25
	lsl r24
	rol r25
	movw r18,r28
	subi r18,-9
	sbci r19,-1
	add r24,r18
	adc r25,r19
	call uECC_vli_bytesToNative
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r26,r24
	ld r18,X+
	ld r19,X
	movw r20,r28
	subi r20,-57
	sbci r21,-1
	movw r22,r28
	subi r22,-41
	sbci r23,-1
	movw r24,r28
	adiw r24,41
	call regularize_k
	std Y+8,r25
	std Y+7,r24
	call uECC_get_rng
	or r24,r25
	breq .L19
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	movw r22,r24
	subi r22,-4
	sbci r23,-1
	movw r18,r28
	subi r18,-73
	sbci r19,-1
	ldd r24,Y+7
	ldd r25,Y+8
	lsl r24
	rol r25
	add r24,r18
	adc r25,r19
	movw r26,r24
	ld r24,X+
	ld r25,X
	ldd r20,Y+5
	call uECC_generate_random_int
	or r24,r25
	brne .L20
	std Y+4,__zero_reg__
	std Y+3,__zero_reg__
	rjmp .L21
.L20:
	movw r18,r28
	subi r18,-73
	sbci r19,-1
	ldd r24,Y+7
	ldd r25,Y+8
	lsl r24
	rol r25
	add r24,r18
	adc r25,r19
	movw r30,r24
	ld r24,Z
	ldd r25,Z+1
	std Y+2,r25
	std Y+1,r24
.L19:
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r26,r24
	ld r24,X+
	ld r25,X
	movw r30,r24
	ldd r24,Z+2
	ldd r25,Z+3
	movw r18,r24
	subi r18,-1
	sbci r19,-1
	adiw r28,85-62
	std Y+63,r19
	std Y+62,r18
	sbiw r28,85-62
	ldi r18,lo8(1)
	ldd r24,Y+7
	ldd r25,Y+8
	or r24,r25
	breq .L22
	ldi r18,0
.L22:
	mov r24,r18
	ldi r25,0
	movw r18,r28
	subi r18,-73
	sbci r19,-1
	lsl r24
	rol r25
	add r24,r18
	adc r25,r19
	movw r26,r24
	ld r20,X+
	ld r21,X
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r30,r24
	ld r26,Z
	ldd r27,Z+1
	ldd r18,Y+1
	ldd r19,Y+2
	movw r22,r28
	subi r22,-9
	sbci r23,-1
	movw r24,r28
	adiw r24,9
	movw r14,r26
	adiw r28,85-62
	ldd r16,Y+62
	ldd r17,Y+63
	sbiw r28,85-62
	call EccPoint_mult
	ldd r24,Y+6
	mov r18,r24
	lsl r24
	sbc r19,r19
	movw r20,r28
	subi r20,-9
	sbci r21,-1
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	movw r26,r24
	ld r24,X+
	ld r25,X
	movw r22,r18
	call uECC_vli_nativeToBytes
	movw r24,r28
	subi r24,-83
	sbci r25,-1
	movw r30,r24
	ld r18,Z
	ldd r19,Z+1
	movw r24,r28
	adiw r24,9
	movw r22,r18
	call EccPoint_isZero
	ldi r18,lo8(1)
	or r24,r25
	breq .L23
	ldi r18,0
.L23:
	mov r24,r18
	ldi r25,0
	std Y+4,r25
	std Y+3,r24
.L21:
	movw r24,r28
	subi r24,-73
	sbci r25,-1
	ldi r20,lo8(4)
	ldi r21,0
	ldi r22,0
	call _set_secure
	movw r24,r28
	adiw r24,57
	ldi r20,lo8(16)
	ldi r21,0
	ldi r22,0
	call _set_secure
	movw r24,r28
	adiw r24,41
	ldi r20,lo8(16)
	ldi r21,0
	ldi r22,0
	call _set_secure
	ldd r24,Y+3
	ldd r25,Y+4
/* epilogue start */
	subi r28,-86
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	ret
	.size	uECC_shared_secret, .-uECC_shared_secret
	.ident	"GCC: (GNU) 7.3.0"
.global __do_copy_data
