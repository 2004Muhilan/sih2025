	.file	"tinycrypt_ecc_dsa.c"
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__SREG__ = 0x3f
__tmp_reg__ = 0
__zero_reg__ = 1
	.text
.global	uECC_sign_with_k
	.type	uECC_sign_with_k, @function
uECC_sign_with_k:
	push r2
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,78
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 78 */
/* stack size = 96 */
.L__stack_usage = 96
	adiw r28,73-62
	std Y+63,r25
	std Y+62,r24
	sbiw r28,73-62
	adiw r28,71-62
	std Y+63,r23
	std Y+62,r22
	sbiw r28,71-62
	movw r4,r20
	movw r10,r18
	adiw r28,69-62
	std Y+63,r17
	std Y+62,r16
	sbiw r28,69-62
	movw r12,r14
	movw r8,r28
	ldi r18,49
	add r8,r18
	adc r9,__zero_reg__
	adiw r28,65-62
	std Y+63,r9
	std Y+62,r8
	sbiw r28,65-62
	movw r6,r28
	ldi r19,33
	add r6,r19
	adc r7,__zero_reg__
	adiw r28,67-62
	std Y+63,r7
	std Y+62,r6
	sbiw r28,67-62
	movw r30,r14
	ld r3,Z
	ldd r16,Z+2
	ldd r17,Z+3
	mov r22,r3
	movw r24,r10
	call uECC_vli_isZero
	or r24,r25
	breq .L2
.L5:
	ldi r25,0
	ldi r24,0
.L1:
/* epilogue start */
	subi r28,-78
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	pop r2
	ret
.L2:
	movw r24,r16
	adiw r24,31
	sbrc r25,7
	adiw r24,31
.L4:
	movw r18,r24
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	adiw r28,75-62
	std Y+63,r19
	std Y+62,r18
	sbiw r28,75-62
	movw r24,r12
	adiw r24,20
	adiw r28,77-62
	std Y+63,r25
	std Y+62,r24
	sbiw r28,77-62
	adiw r28,75-63
	ldd r20,Y+63
	sbiw r28,75-63
	movw r22,r10
	call uECC_vli_cmp
	cpi r24,lo8(1)
	brne .L5
	movw r18,r12
	movw r20,r6
	movw r22,r8
	movw r24,r10
	call regularize_k
	subi r16,-1
	sbci r17,-1
	ldi r30,lo8(1)
	ldi r31,0
	or r24,r25
	breq .+2
	rjmp .L29
.L6:
	lsl r30
	rol r31
	ldi r18,lo8(65)
	ldi r19,0
	add r18,r28
	adc r19,r29
	add r30,r18
	adc r31,r19
	ld r20,Z
	ldd r21,Z+1
	movw r14,r12
	ldi r19,0
	ldi r18,0
	movw r22,r12
	subi r22,-36
	sbci r23,-1
	movw r24,r28
	adiw r24,1
	call EccPoint_mult
	mov r22,r3
	movw r24,r28
	adiw r24,1
	call uECC_vli_isZero
	movw r14,r24
	or r24,r25
	breq .+2
	rjmp .L5
	call uECC_get_rng
	or r24,r25
	brne .+2
	rjmp .L30
	adiw r28,75-63
	ldd r20,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,77-62
	movw r24,r8
	call uECC_generate_random_int
	or r24,r25
	brne .+2
	rjmp .L5
.L8:
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r8
	movw r22,r10
	movw r24,r10
	call uECC_vli_modMult
	adiw r28,75-63
	ldd r18,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r20,Y+62
	ldd r21,Y+63
	sbiw r28,77-62
	movw r22,r10
	movw r24,r10
	call uECC_vli_modInv
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r8
	movw r22,r10
	movw r24,r10
	call uECC_vli_modMult
	movw r30,r12
	ldd r22,Z+1
	mov __tmp_reg__,r22
	lsl r0
	sbc r23,r23
	movw r20,r28
	subi r20,-1
	sbci r21,-1
	adiw r28,69-62
	ldd r24,Y+62
	ldd r25,Y+63
	sbiw r28,69-62
	call uECC_vli_nativeToBytes
	movw r30,r12
	ldd r24,Z+2
	ldd r25,Z+3
	movw r20,r24
	subi r20,-7
	sbci r21,-1
	sbrs r21,7
	rjmp .L9
	subi r20,-7
	sbci r21,-1
.L9:
	asr r21
	ror r20
	asr r21
	ror r20
	asr r21
	ror r20
	adiw r28,73-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,73-62
	movw r24,r8
	call uECC_vli_bytesToNative
	adiw r28,75-63
	ldd r18,Y+63
	sbiw r28,75-63
	mov r30,r18
	lsl r18
	sbc r31,r31
	sbiw r30,1
	lsl r30
	rol r31
	ldi r24,lo8(1)
	ldi r25,0
	add r24,r28
	adc r25,r29
	add r30,r24
	adc r31,r25
	std Z+33,__zero_reg__
	std Z+32,__zero_reg__
	mov r20,r3
	movw r22,r24
	movw r24,r6
	call uECC_vli_set
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r6
	movw r22,r8
	movw r24,r6
	call uECC_vli_modMult
	movw r30,r12
	ldd r24,Z+2
	ldd r25,Z+3
	movw r18,r24
	subi r18,-31
	sbci r19,-1
	sbrs r19,7
	rjmp .L10
	subi r18,-31
	sbci r19,-1
.L10:
	movw r2,r18
	asr r3
	ror r2
	asr r3
	ror r2
	asr r3
	ror r2
	asr r3
	ror r2
	asr r3
	ror r2
	movw r16,r24
	subi r16,-7
	sbci r17,-1
	sbrs r17,7
	rjmp .L11
	subi r16,-7
	sbci r17,-1
.L11:
	asr r17
	ror r16
	asr r17
	ror r16
	asr r17
	ror r16
	cp r4,r16
	cpc r5,r17
	brsh .L12
	movw r16,r4
.L12:
	mov r22,r2
	movw r24,r8
	call uECC_vli_clear
	movw r20,r16
	adiw r28,71-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,71-62
	movw r24,r8
	call uECC_vli_bytesToNative
	lsl r16
	rol r17
	lsl r16
	rol r17
	lsl r16
	rol r17
	movw r30,r12
	ldd r24,Z+2
	ldd r25,Z+3
	cp r24,r16
	cpc r25,r17
	brsh .L14
	sub r16,r24
	sbc r17,r25
	movw r30,r2
	lsl r30
	rol r31
	add r30,r8
	adc r31,r9
	cp r8,r30
	cpc r9,r31
	brsh .L15
	ldi r20,lo8(32)
	ldi r21,0
	sub r20,r16
	sbc r21,r17
.L16:
	ld r19,-Z
	ld r18,-Z
	movw r24,r18
	mov r0,r16
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r0
	brpl 1b
	or r24,r14
	or r25,r15
	std Z+1,r25
	st Z,r24
	movw r14,r18
	mov r0,r20
	rjmp 2f
	1:
	lsl r14
	rol r15
	2:
	dec r0
	brpl 1b
	cp r8,r30
	cpc r9,r31
	brlo .L16
.L15:
	mov r20,r2
	movw r22,r8
	adiw r28,77-62
	ldd r24,Y+62
	ldd r25,Y+63
	sbiw r28,77-62
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L14
	mov r18,r2
	adiw r28,77-62
	ldd r20,Y+62
	ldd r21,Y+63
	sbiw r28,77-62
	movw r22,r8
	movw r24,r8
	call uECC_vli_sub
.L14:
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r6
	movw r22,r8
	movw r24,r6
	call uECC_vli_modAdd
	adiw r28,75-63
	ldd r16,Y+63
	sbiw r28,75-63
	adiw r28,77-62
	ldd r18,Y+62
	ldd r19,Y+63
	sbiw r28,77-62
	movw r20,r10
	movw r22,r6
	movw r24,r6
	call uECC_vli_modMult
	adiw r28,75-63
	ldd r22,Y+63
	sbiw r28,75-63
	movw r24,r6
	call uECC_vli_numBits
	movw r30,r12
	ldd r18,Z+1
	mov __tmp_reg__,r18
	lsl r0
	sbc r19,r19
	movw r20,r18
	lsl r20
	rol r21
	lsl r20
	rol r21
	lsl r20
	rol r21
	cp r20,r24
	cpc r21,r25
	brge .+2
	rjmp .L5
	movw r20,r6
	movw r22,r18
	adiw r28,69-62
	ldd r24,Y+62
	ldd r25,Y+63
	sbiw r28,69-62
	add r24,r18
	adc r25,r19
	call uECC_vli_nativeToBytes
	ldi r24,lo8(1)
	ldi r25,0
	rjmp .L1
.L29:
	ldi r31,0
	ldi r30,0
	rjmp .L6
.L30:
	adiw r28,75-63
	ldd r22,Y+63
	sbiw r28,75-63
	movw r24,r8
	call uECC_vli_clear
	ldi r24,lo8(1)
	ldi r25,0
	std Y+50,r25
	std Y+49,r24
	rjmp .L8
	.size	uECC_sign_with_k, .-uECC_sign_with_k
.global	uECC_sign
	.type	uECC_sign, @function
uECC_sign:
	push r2
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,-128
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 128 */
/* stack size = 146 */
.L__stack_usage = 146
	adiw r28,125-62
	std Y+63,r25
	std Y+62,r24
	sbiw r28,125-62
	subi r28,lo8(-127)
	sbci r29,hi8(-127)
	std Y+1,r23
	st Y,r22
	subi r28,lo8(127)
	sbci r29,hi8(127)
	adiw r28,121-62
	std Y+63,r21
	std Y+62,r20
	sbiw r28,121-62
	adiw r28,123-62
	std Y+63,r19
	std Y+62,r18
	sbiw r28,123-62
	movw r6,r16
	ldi r21,lo8(64)
	mov r12,r21
	mov r13,__zero_reg__
	movw r4,r16
	ldi r20,20
	add r4,r20
	adc r5,__zero_reg__
	movw r2,r28
	ldi r21,81
	add r2,r21
	adc r3,__zero_reg__
	movw r8,r28
	ldi r24,65
	add r8,r24
	adc r9,__zero_reg__
	movw r30,r16
	adiw r30,36
	adiw r28,119-62
	std Y+63,r31
	std Y+62,r30
	sbiw r28,119-62
	rjmp .L35
.L37:
	ldi r31,1
	sub r12,r31
	sbc r13,__zero_reg__
	brne .+2
	rjmp .L32
.L35:
	call uECC_get_rng
	movw r30,r24
	or r24,r25
	brne .+2
	rjmp .L32
	ldi r22,lo8(64)
	ldi r23,0
	movw r24,r28
	adiw r24,33
	icall
	or r24,r25
	brne .+2
	rjmp .L32
	movw r30,r6
	ldd r24,Z+2
	ldd r25,Z+3
	movw r18,r24
	subi r18,-31
	sbci r19,-1
	sbrs r19,7
	rjmp .L33
	subi r18,-31
	sbci r19,-1
.L33:
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	movw r20,r4
	movw r22,r28
	subi r22,-33
	sbci r23,-1
	movw r24,r28
	subi r24,-97
	sbci r25,-1
	call uECC_vli_mmod
	adiw r28,113-62
	std Y+63,r3
	std Y+62,r2
	sbiw r28,113-62
	adiw r28,115-62
	std Y+63,r9
	std Y+62,r8
	sbiw r28,115-62
	movw r30,r6
	ld r31,Z
	adiw r28,117-63
	std Y+63,r31
	sbiw r28,117-63
	movw r30,r6
	ldd r16,Z+2
	ldd r17,Z+3
	adiw r28,117-63
	ldd r22,Y+63
	sbiw r28,117-63
	movw r24,r28
	subi r24,-97
	sbci r25,-1
	call uECC_vli_isZero
	or r24,r25
	breq .+2
	rjmp .L37
	movw r10,r16
	ldi r20,31
	add r10,r20
	adc r11,__zero_reg__
	sbrs r11,7
	rjmp .L36
	movw r10,r16
	ldi r21,62
	add r10,r21
	adc r11,__zero_reg__
.L36:
	asr r11
	ror r10
	asr r11
	ror r10
	asr r11
	ror r10
	asr r11
	ror r10
	asr r11
	ror r10
	mov r20,r10
	movw r22,r28
	subi r22,-97
	sbci r23,-1
	movw r24,r4
	call uECC_vli_cmp
	cpi r24,lo8(1)
	breq .+2
	rjmp .L37
	movw r18,r6
	movw r20,r8
	movw r22,r2
	movw r24,r28
	subi r24,-97
	sbci r25,-1
	call regularize_k
	subi r16,-1
	sbci r17,-1
	ldi r18,lo8(1)
	ldi r19,0
	or r24,r25
	breq .+2
	rjmp .L68
.L38:
	lsl r18
	rol r19
	ldi r30,lo8(113)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r18
	adc r31,r19
	ld r20,Z
	ldd r21,Z+1
	movw r14,r6
	ldi r19,0
	ldi r18,0
	adiw r28,119-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,119-62
	movw r24,r28
	adiw r24,1
	call EccPoint_mult
	adiw r28,117-63
	ldd r22,Y+63
	sbiw r28,117-63
	movw r24,r28
	adiw r24,1
	call uECC_vli_isZero
	movw r14,r24
	or r24,r25
	breq .+2
	rjmp .L37
	call uECC_get_rng
	or r24,r25
	brne .+2
	rjmp .L69
	mov r20,r10
	movw r22,r4
	movw r24,r2
	call uECC_generate_random_int
	or r24,r25
	brne .+2
	rjmp .L37
.L40:
	mov r16,r10
	movw r18,r4
	movw r20,r2
	movw r22,r28
	subi r22,-97
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult
	mov r18,r10
	movw r20,r4
	movw r22,r28
	subi r22,-97
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modInv
	movw r18,r4
	movw r20,r2
	movw r22,r28
	subi r22,-97
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult
	movw r30,r6
	ldd r22,Z+1
	mov __tmp_reg__,r22
	lsl r0
	sbc r23,r23
	movw r20,r28
	subi r20,-1
	sbci r21,-1
	adiw r28,123-62
	ldd r24,Y+62
	ldd r25,Y+63
	sbiw r28,123-62
	call uECC_vli_nativeToBytes
	movw r30,r6
	ldd r24,Z+2
	ldd r25,Z+3
	movw r20,r24
	subi r20,-7
	sbci r21,-1
	sbrs r21,7
	rjmp .L41
	subi r20,-7
	sbci r21,-1
.L41:
	asr r21
	ror r20
	asr r21
	ror r20
	asr r21
	ror r20
	adiw r28,125-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,125-62
	movw r24,r2
	call uECC_vli_bytesToNative
	mov r30,r10
	mov __tmp_reg__,r10
	lsl r0
	sbc r31,r31
	sbiw r30,1
	lsl r30
	rol r31
	add r30,r8
	adc r31,r9
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	adiw r28,117-63
	ldd r20,Y+63
	sbiw r28,117-63
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r8
	call uECC_vli_set
	mov r16,r10
	movw r18,r4
	movw r20,r8
	movw r22,r2
	movw r24,r8
	call uECC_vli_modMult
	movw r30,r6
	ldd r24,Z+2
	ldd r25,Z+3
	movw r18,r24
	subi r18,-31
	sbci r19,-1
	sbrs r19,7
	rjmp .L42
	subi r18,-31
	sbci r19,-1
.L42:
	movw r20,r18
	asr r21
	ror r20
	asr r21
	ror r20
	asr r21
	ror r20
	asr r21
	ror r20
	asr r21
	ror r20
	adiw r28,117-62
	std Y+63,r21
	std Y+62,r20
	sbiw r28,117-62
	movw r16,r24
	subi r16,-7
	sbci r17,-1
	sbrs r17,7
	rjmp .L43
	subi r16,-7
	sbci r17,-1
.L43:
	asr r17
	ror r16
	asr r17
	ror r16
	asr r17
	ror r16
	adiw r28,121-62
	ldd r24,Y+62
	ldd r25,Y+63
	sbiw r28,121-62
	cp r24,r16
	cpc r25,r17
	brsh .L44
	movw r16,r24
.L44:
	adiw r28,117-63
	ldd r22,Y+63
	sbiw r28,117-63
	movw r24,r2
	call uECC_vli_clear
	movw r20,r16
	subi r28,lo8(-127)
	sbci r29,hi8(-127)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(127)
	sbci r29,hi8(127)
	movw r24,r2
	call uECC_vli_bytesToNative
	lsl r16
	rol r17
	lsl r16
	rol r17
	lsl r16
	rol r17
	movw r30,r6
	ldd r24,Z+2
	ldd r25,Z+3
	cp r24,r16
	cpc r25,r17
	brsh .L46
	sub r16,r24
	sbc r17,r25
	adiw r28,117-62
	ldd r30,Y+62
	ldd r31,Y+63
	sbiw r28,117-62
	lsl r30
	rol r31
	add r30,r2
	adc r31,r3
	cp r2,r30
	cpc r3,r31
	brsh .L47
	ldi r20,lo8(32)
	ldi r21,0
	sub r20,r16
	sbc r21,r17
.L48:
	ld r19,-Z
	ld r18,-Z
	movw r24,r18
	mov r0,r16
	rjmp 2f
	1:
	lsr r25
	ror r24
	2:
	dec r0
	brpl 1b
	or r24,r14
	or r25,r15
	std Z+1,r25
	st Z,r24
	movw r14,r18
	mov r0,r20
	rjmp 2f
	1:
	lsl r14
	rol r15
	2:
	dec r0
	brpl 1b
	cp r2,r30
	cpc r3,r31
	brlo .L48
.L47:
	adiw r28,117-63
	ldd r20,Y+63
	sbiw r28,117-63
	movw r22,r2
	movw r24,r4
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L46
	adiw r28,117-63
	ldd r18,Y+63
	sbiw r28,117-63
	movw r20,r4
	movw r22,r2
	movw r24,r2
	call uECC_vli_sub
.L46:
	mov r16,r10
	movw r18,r4
	movw r20,r8
	movw r22,r2
	movw r24,r8
	call uECC_vli_modAdd
	movw r18,r4
	movw r20,r28
	subi r20,-97
	sbci r21,-1
	movw r22,r8
	movw r24,r8
	call uECC_vli_modMult
	mov r22,r10
	movw r24,r8
	call uECC_vli_numBits
	movw r30,r6
	ldd r18,Z+1
	mov __tmp_reg__,r18
	lsl r0
	sbc r19,r19
	movw r20,r18
	lsl r20
	rol r21
	lsl r20
	rol r21
	lsl r20
	rol r21
	cp r20,r24
	cpc r21,r25
	brge .+2
	rjmp .L37
	movw r20,r8
	movw r22,r18
	adiw r28,123-62
	ldd r24,Y+62
	ldd r25,Y+63
	sbiw r28,123-62
	add r24,r18
	adc r25,r19
	call uECC_vli_nativeToBytes
	ldi r24,lo8(1)
	ldi r25,0
	rjmp .L31
.L32:
	ldi r25,0
	ldi r24,0
.L31:
/* epilogue start */
	subi r28,-128
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	pop r2
	ret
.L68:
	ldi r19,0
	ldi r18,0
	rjmp .L38
.L69:
	mov r22,r10
	movw r24,r2
	call uECC_vli_clear
	ldi r20,lo8(1)
	ldi r21,0
	movw r30,r2
	std Z+1,r21
	st Z,r20
	rjmp .L40
	.size	uECC_sign, .-uECC_sign
.global	uECC_verify
	.type	uECC_verify, @function
uECC_verify:
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,-16
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 240 */
/* stack size = 257 */
.L__stack_usage = 257
	movw r10,r24
	subi r28,lo8(-237)
	sbci r29,hi8(-237)
	std Y+1,r23
	st Y,r22
	subi r28,lo8(237)
	sbci r29,hi8(237)
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	std Y+1,r21
	st Y,r20
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r12,r18
	movw r14,r16
	movw r26,r16
	ld r3,X
	adiw r26,2
	ld r18,X+
	ld r19,X
	movw r6,r18
	ldi r27,31
	add r6,r27
	adc r7,__zero_reg__
	sbrs r7,7
	rjmp .L71
	movw r6,r18
	ldi r30,62
	add r6,r30
	adc r7,__zero_reg__
.L71:
	asr r7
	ror r6
	asr r7
	ror r6
	asr r7
	ror r6
	asr r7
	ror r6
	asr r7
	ror r6
	mov r16,r6
	mov __tmp_reg__,r6
	lsl r0
	sbc r17,r17
	subi r16,1
	sbc r17,__zero_reg__
	lsl r16
	rol r17
	ldi r30,lo8(-95)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	ldi r30,lo8(81)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	ldi r30,lo8(65)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	movw r26,r14
	adiw r26,1
	ld r20,X
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r10
	movw r24,r28
	adiw r24,1
	call uECC_vli_bytesToNative
	movw r30,r14
	ldd r20,Z+1
	mov r8,r3
	lsl r8
	sbc r9,r9
	clr r4
	inc r4
	mov r5,__zero_reg__
	add r4,r28
	adc r5,r29
	add r4,r8
	adc r5,r9
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r10
	add r22,r20
	adc r23,r21
	movw r24,r4
	call uECC_vli_bytesToNative
	movw r26,r14
	adiw r26,1
	ld r20,X
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r12
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	call uECC_vli_bytesToNative
	movw r30,r14
	ldd r20,Z+1
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r12
	add r22,r20
	adc r23,r21
	movw r24,r28
	subi r24,-65
	sbci r25,-1
	call uECC_vli_bytesToNative
	mov r22,r3
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	call uECC_vli_isZero
	or r24,r25
	breq .L72
.L74:
	ldi r24,0
	ldi r25,0
.L70:
/* epilogue start */
	subi r28,16
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	ret
.L72:
	mov r22,r3
	movw r24,r28
	subi r24,-65
	sbci r25,-1
	call uECC_vli_isZero
	movw r12,r24
	or r24,r25
	brne .L74
	movw r10,r14
	ldi r31,20
	add r10,r31
	adc r11,__zero_reg__
	mov r20,r6
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r10
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	brne .L74
	mov r20,r6
	movw r22,r28
	subi r22,-65
	sbci r23,-1
	movw r24,r10
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	brne .L74
	mov r18,r6
	movw r20,r10
	movw r22,r28
	subi r22,-65
	sbci r23,-1
	movw r24,r28
	subi r24,79
	sbci r25,-1
	call uECC_vli_modInv
	movw r20,r28
	subi r20,47
	sbci r21,-1
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	std Y+1,r21
	st Y,r20
	subi r28,lo8(233)
	sbci r29,hi8(233)
	movw r30,r20
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	movw r26,r14
	adiw r26,2
	ld r24,X+
	ld r25,X
	movw r18,r24
	subi r18,-31
	sbci r19,-1
	sbrs r19,7
	rjmp .L75
	subi r18,-31
	sbci r19,-1
.L75:
	movw r30,r18
	asr r31
	ror r30
	asr r31
	ror r30
	asr r31
	ror r30
	asr r31
	ror r30
	asr r31
	ror r30
	subi r28,lo8(-239)
	sbci r29,hi8(-239)
	std Y+1,r31
	st Y,r30
	subi r28,lo8(239)
	sbci r29,hi8(239)
	movw r16,r24
	subi r16,-7
	sbci r17,-1
	sbrs r17,7
	rjmp .L76
	subi r16,-7
	sbci r17,-1
.L76:
	asr r17
	ror r16
	asr r17
	ror r16
	asr r17
	ror r16
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r20,Y
	ldd r21,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	cp r20,r16
	cpc r21,r17
	brsh .L77
	movw r16,r20
.L77:
	subi r28,lo8(-239)
	sbci r29,hi8(-239)
	ld r22,Y
	subi r28,lo8(239)
	sbci r29,hi8(239)
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call uECC_vli_clear
	movw r20,r16
	subi r28,lo8(-237)
	sbci r29,hi8(-237)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(237)
	sbci r29,hi8(237)
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call uECC_vli_bytesToNative
	lsl r16
	rol r17
	lsl r16
	rol r17
	lsl r16
	rol r17
	movw r26,r14
	adiw r26,2
	ld r24,X+
	ld r25,X
	cp r24,r16
	cpc r25,r17
	brlo .+2
	rjmp .L79
	sub r16,r24
	sbc r17,r25
	subi r28,lo8(-239)
	sbci r29,hi8(-239)
	ld r30,Y
	ldd r31,Y+1
	subi r28,lo8(239)
	sbci r29,hi8(239)
	lsl r30
	rol r31
	ldi r20,lo8(-47)
	ldi r21,0
	add r20,r28
	adc r21,r29
	add r30,r20
	adc r31,r21
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r24,Y
	ldd r25,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	cp r24,r30
	cpc r25,r31
	brsh .L80
	ldi r20,lo8(32)
	ldi r21,0
	sub r20,r16
	sbc r21,r17
	movw r26,r24
.L81:
	ld r25,-Z
	ld r24,-Z
	movw r18,r24
	mov r0,r16
	rjmp 2f
	1:
	lsr r19
	ror r18
	2:
	dec r0
	brpl 1b
	or r12,r18
	or r13,r19
	std Z+1,r13
	st Z,r12
	movw r12,r24
	mov r0,r20
	rjmp 2f
	1:
	lsl r12
	rol r13
	2:
	dec r0
	brpl 1b
	cp r26,r30
	cpc r27,r31
	brlo .L81
.L80:
	subi r28,lo8(-239)
	sbci r29,hi8(-239)
	ld r20,Y
	subi r28,lo8(239)
	sbci r29,hi8(239)
	movw r22,r28
	subi r22,47
	sbci r23,-1
	movw r24,r10
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L79
	subi r28,lo8(-239)
	sbci r29,hi8(-239)
	ld r18,Y
	subi r28,lo8(239)
	sbci r29,hi8(239)
	movw r20,r10
	movw r22,r28
	subi r22,47
	sbci r23,-1
	movw r24,r22
	call uECC_vli_sub
.L79:
	mov r16,r6
	movw r18,r10
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,47
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult
	movw r18,r10
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r28
	subi r24,63
	sbci r25,-1
	call uECC_vli_modMult
	movw r12,r28
	ldi r27,33
	add r12,r27
	adc r13,__zero_reg__
	mov r20,r3
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r12
	call uECC_vli_set
	movw r30,r12
	add r30,r8
	adc r31,r9
	subi r28,lo8(-237)
	sbci r29,hi8(-237)
	std Y+1,r31
	st Y,r30
	subi r28,lo8(237)
	sbci r29,hi8(237)
	mov r20,r3
	movw r22,r4
	movw r24,r30
	call uECC_vli_set
	mov r20,r3
	movw r4,r14
	ldi r31,36
	add r4,r31
	adc r5,__zero_reg__
	movw r22,r4
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call uECC_vli_set
	movw r22,r4
	add r22,r8
	adc r23,r9
	mov r20,r3
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call uECC_vli_set
	movw r20,r14
	subi r20,-4
	sbci r21,-1
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	std Y+1,r21
	st Y,r20
	subi r28,lo8(235)
	sbci r29,hi8(235)
	mov r16,r3
	movw r18,r20
	movw r20,r28
	subi r20,127
	sbci r21,-1
	movw r22,r12
	movw r24,r28
	subi r24,79
	sbci r25,-1
	call uECC_vli_modSub
	movw r16,r14
	subi r28,lo8(-237)
	sbci r29,hi8(-237)
	ld r18,Y
	ldd r19,Y+1
	subi r28,lo8(237)
	sbci r29,hi8(237)
	movw r20,r12
	movw r22,r28
	subi r22,-113
	sbci r23,-1
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call XYcZ_add
	mov r18,r3
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r20,Y
	ldd r21,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r22,r28
	subi r22,79
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modInv
	movw r18,r14
	movw r20,r28
	subi r20,79
	sbci r21,-1
	subi r28,lo8(-237)
	sbci r29,hi8(-237)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(237)
	sbci r29,hi8(237)
	movw r24,r12
	call apply_z
	subi r28,lo8(-225)
	sbci r29,hi8(-225)
	std Y+1,__zero_reg__
	st Y,__zero_reg__
	subi r28,lo8(225)
	sbci r29,hi8(225)
	subi r28,lo8(-227)
	sbci r29,hi8(-227)
	std Y+1,r5
	st Y,r4
	subi r28,lo8(227)
	sbci r29,hi8(227)
	ldi r24,lo8(1)
	ldi r25,0
	add r24,r28
	adc r25,r29
	subi r28,lo8(-229)
	sbci r29,hi8(-229)
	std Y+1,r25
	st Y,r24
	subi r28,lo8(229)
	sbci r29,hi8(229)
	subi r28,lo8(-231)
	sbci r29,hi8(-231)
	std Y+1,r13
	st Y,r12
	subi r28,lo8(231)
	sbci r29,hi8(231)
	mov r22,r6
	subi r24,64
	sbci r25,-1
	call uECC_vli_numBits
	mov r17,r24
	mov r16,r25
	mov r22,r6
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call uECC_vli_numBits
	mov r4,r17
	mov r5,r16
	cp r4,r24
	cpc r5,r25
	brge .L83
	movw r4,r24
.L83:
	movw r12,r4
	ldi r25,1
	sub r12,r25
	sbc r13,__zero_reg__
	movw r22,r12
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call uECC_vli_testBit
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	brne .L84
	ldi r19,0
.L84:
	mov r16,r19
	mov r17,r18
	movw r22,r12
	movw r24,r28
	subi r24,63
	sbci r25,-1
	call uECC_vli_testBit
	or r24,r25
	breq .L85
	ori r16,2
.L85:
	lsl r16
	rol r17
	ldi r30,lo8(-31)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	ld r16,Z
	ldd r17,Z+1
	mov r20,r3
	movw r22,r16
	movw r24,r28
	subi r24,95
	sbci r25,-1
	call uECC_vli_set
	movw r22,r16
	add r22,r8
	adc r23,r9
	mov r20,r3
	movw r24,r28
	subi r24,111
	sbci r25,-1
	call uECC_vli_set
	mov r22,r3
	movw r24,r28
	subi r24,79
	sbci r25,-1
	call uECC_vli_clear
	ldi r24,lo8(1)
	ldi r25,0
	subi r28,lo8(-177)
	sbci r29,hi8(-177)
	std Y+1,r25
	st Y,r24
	subi r28,lo8(177)
	sbci r29,hi8(177)
	movw r12,r4
	ldi r26,2
	sub r12,r26
	sbc r13,__zero_reg__
	sbrc r13,7
	rjmp .L86
	movw r30,r14
	subi r30,-84
	sbci r31,-1
	movw r4,r30
.L90:
	movw r26,r4
	ld r30,X+
	ld r31,X
	movw r18,r14
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,111
	sbci r23,-1
	movw r24,r28
	subi r24,95
	sbci r25,-1
	icall
	movw r22,r12
	movw r24,r28
	subi r24,47
	sbci r25,-1
	call uECC_vli_testBit
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	brne .L87
	ldi r19,0
.L87:
	mov r16,r19
	mov r17,r18
	movw r22,r12
	movw r24,r28
	subi r24,63
	sbci r25,-1
	call uECC_vli_testBit
	or r24,r25
	breq .L88
	ori r16,2
.L88:
	lsl r16
	rol r17
	ldi r30,lo8(-31)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	ld r16,Z
	ldd r17,Z+1
	cp r16,__zero_reg__
	cpc r17,__zero_reg__
	brne .+2
	rjmp .L89
	mov r20,r3
	movw r22,r16
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call uECC_vli_set
	movw r22,r16
	add r22,r8
	adc r23,r9
	mov r20,r3
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call uECC_vli_set
	movw r18,r14
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,-113
	sbci r23,-1
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call apply_z
	mov r16,r3
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r18,Y
	ldd r19,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r20,r28
	subi r20,127
	sbci r21,-1
	movw r22,r28
	subi r22,95
	sbci r23,-1
	movw r24,r28
	subi r24,-97
	sbci r25,-1
	call uECC_vli_modSub
	movw r16,r14
	movw r18,r28
	subi r18,111
	sbci r19,-1
	movw r20,r28
	subi r20,95
	sbci r21,-1
	movw r22,r28
	subi r22,-113
	sbci r23,-1
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call XYcZ_add
	movw r18,r14
	movw r20,r28
	subi r20,-97
	sbci r21,-1
	movw r22,r28
	subi r22,79
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult_fast
.L89:
	ldi r27,1
	sub r12,r27
	sbc r13,__zero_reg__
	brcs .+2
	rjmp .L90
.L86:
	mov r18,r3
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r20,Y
	ldd r21,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r22,r28
	subi r22,79
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modInv
	movw r18,r14
	movw r20,r28
	subi r20,79
	sbci r21,-1
	movw r22,r28
	subi r22,111
	sbci r23,-1
	movw r24,r28
	subi r24,95
	sbci r25,-1
	call apply_z
	mov r20,r6
	movw r22,r28
	subi r22,95
	sbci r23,-1
	movw r24,r10
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L91
	mov r18,r6
	movw r20,r10
	movw r22,r28
	subi r22,95
	sbci r23,-1
	movw r24,r22
	call uECC_vli_sub
.L91:
	mov r20,r3
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r28
	subi r24,95
	sbci r25,-1
	call uECC_vli_equal
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	breq .L92
	ldi r19,0
.L92:
	mov r24,r19
	mov r25,r18
	rjmp .L70
	.size	uECC_verify, .-uECC_verify
	.ident	"GCC: (GNU) 7.3.0"
