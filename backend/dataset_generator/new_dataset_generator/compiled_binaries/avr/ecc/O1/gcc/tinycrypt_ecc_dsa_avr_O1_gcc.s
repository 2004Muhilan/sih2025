	.file	"tinycrypt_ecc_dsa.c"
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__SREG__ = 0x3f
__tmp_reg__ = 0
__zero_reg__ = 1
	.text
	.type	bits2int, @function
bits2int:
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
/* prologue: function */
/* frame size = 0 */
/* stack size = 10 */
.L__stack_usage = 10
	movw r14,r24
	movw r10,r22
	movw r16,r18
	movw r30,r18
	ldd r24,Z+2
	ldd r25,Z+3
	movw r18,r24
	subi r18,-31
	sbci r19,-1
	movw r28,r18
	tst r29
	brge .+2
	rjmp .L9
.L2:
	asr r29
	ror r28
	asr r29
	ror r28
	asr r29
	ror r28
	asr r29
	ror r28
	asr r29
	ror r28
	adiw r24,7
	movw r12,r24
	brpl .+2
	rjmp .L10
.L3:
	asr r13
	ror r12
	asr r13
	ror r12
	asr r13
	ror r12
	cp r20,r12
	cpc r21,r13
	brsh .L4
	movw r12,r20
.L4:
	mov r22,r28
	movw r24,r14
	call uECC_vli_clear
	movw r20,r12
	movw r22,r10
	movw r24,r14
	call uECC_vli_bytesToNative
	lsl r12
	rol r13
	lsl r12
	rol r13
	lsl r12
	rol r13
	movw r30,r16
	ldd r24,Z+2
	ldd r25,Z+3
	cp r24,r12
	cpc r25,r13
	brsh .L1
	sub r12,r24
	sbc r13,r25
	movw r30,r28
	lsl r30
	rol r31
	add r30,r14
	adc r31,r15
	cp r14,r30
	cpc r15,r31
	brsh .L6
	ldi r21,0
	ldi r20,0
	ldi r22,lo8(32)
	ldi r23,0
	sub r22,r12
	sbc r23,r13
.L7:
	ld r25,-Z
	ld r24,-Z
	movw r18,r24
	mov r0,r12
	rjmp 2f
	1:
	lsr r19
	ror r18
	2:
	dec r0
	brpl 1b
	or r18,r20
	or r19,r21
	std Z+1,r19
	st Z,r18
	movw r20,r24
	mov r0,r22
	rjmp 2f
	1:
	lsl r20
	rol r21
	2:
	dec r0
	brpl 1b
	cp r14,r30
	cpc r15,r31
	brlo .L7
.L6:
	subi r16,-20
	sbci r17,-1
	mov r20,r28
	movw r22,r14
	movw r24,r16
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L1
	mov r18,r28
	movw r20,r16
	movw r22,r14
	movw r24,r14
	call uECC_vli_sub
.L1:
/* epilogue start */
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	ret
.L9:
	adiw r28,31
	rjmp .L2
.L10:
	ldi r31,7
	add r12,r31
	adc r13,__zero_reg__
	rjmp .L3
	.size	bits2int, .-bits2int
.global	uECC_sign_with_k
	.type	uECC_sign_with_k, @function
uECC_sign_with_k:
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,74
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 74 */
/* stack size = 91 */
.L__stack_usage = 91
	adiw r28,69-62
	std Y+63,r25
	std Y+62,r24
	sbiw r28,69-62
	adiw r28,71-62
	std Y+63,r23
	std Y+62,r22
	sbiw r28,71-62
	adiw r28,73-62
	std Y+63,r21
	std Y+62,r20
	sbiw r28,73-62
	movw r10,r18
	movw r4,r16
	movw r12,r14
	movw r24,r28
	adiw r24,1
	std Y+34,r25
	std Y+33,r24
	adiw r24,16
	std Y+36,r25
	std Y+35,r24
	movw r30,r14
	ld r3,Z
	ldd r16,Z+2
	ldd r17,Z+3
	mov r22,r3
	movw r24,r18
	call uECC_vli_isZero
	or r24,r25
	breq .L22
	ldi r25,0
	ldi r24,0
.L11:
/* epilogue start */
	subi r28,-74
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	ret
.L22:
	movw r18,r16
	subi r18,-31
	sbci r19,-1
	movw r8,r18
	brmi .L23
.L13:
	asr r9
	ror r8
	asr r9
	ror r8
	asr r9
	ror r8
	asr r9
	ror r8
	asr r9
	ror r8
	movw r6,r12
	ldi r24,20
	add r6,r24
	adc r7,__zero_reg__
	mov r20,r8
	movw r22,r10
	movw r24,r6
	call uECC_vli_cmp
	cpi r24,lo8(1)
	breq .L24
	ldi r25,0
	ldi r24,0
	rjmp .L11
.L23:
	ldi r31,31
	add r8,r31
	adc r9,__zero_reg__
	rjmp .L13
.L24:
	movw r18,r12
	movw r20,r28
	subi r20,-17
	sbci r21,-1
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r10
	call regularize_k
	subi r16,-1
	sbci r17,-1
	ldi r18,lo8(1)
	ldi r19,0
	or r24,r25
	breq .L14
	ldi r19,0
	ldi r18,0
.L14:
	lsl r18
	rol r19
	movw r30,r28
	add r30,r18
	adc r31,r19
	ldd r20,Z+33
	ldd r21,Z+34
	movw r14,r12
	ldi r19,0
	ldi r18,0
	movw r22,r12
	subi r22,-36
	sbci r23,-1
	movw r24,r28
	adiw r24,37
	call EccPoint_mult
	mov r22,r3
	movw r24,r28
	adiw r24,37
	call uECC_vli_isZero
	or r24,r25
	breq .L25
	ldi r25,0
	ldi r24,0
	rjmp .L11
.L25:
	call uECC_get_rng
	or r24,r25
	brne .+2
	rjmp .L26
	mov r20,r8
	movw r22,r6
	movw r24,r28
	adiw r24,1
	call uECC_generate_random_int
	sbiw r24,0
	brne .+2
	rjmp .L11
.L16:
	mov r16,r8
	movw r18,r6
	movw r20,r28
	subi r20,-1
	sbci r21,-1
	movw r22,r10
	movw r24,r10
	call uECC_vli_modMult
	mov r18,r8
	movw r20,r6
	movw r22,r10
	movw r24,r10
	call uECC_vli_modInv
	movw r18,r6
	movw r20,r28
	subi r20,-1
	sbci r21,-1
	movw r22,r10
	movw r24,r10
	call uECC_vli_modMult
	movw r30,r12
	ldd r22,Z+1
	mov __tmp_reg__,r22
	lsl r0
	sbc r23,r23
	movw r20,r28
	subi r20,-37
	sbci r21,-1
	movw r24,r4
	call uECC_vli_nativeToBytes
	movw r30,r12
	ldd r24,Z+2
	ldd r25,Z+3
	adiw r24,7
	movw r20,r24
	brpl .+2
	rjmp .L27
.L17:
	asr r21
	ror r20
	asr r21
	ror r20
	asr r21
	ror r20
	adiw r28,69-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,69-62
	movw r24,r28
	adiw r24,1
	call uECC_vli_bytesToNative
	mov r30,r8
	mov __tmp_reg__,r8
	lsl r0
	sbc r31,r31
	sbiw r30,1
	lsl r30
	rol r31
	ldi r24,lo8(1)
	ldi r25,0
	add r24,r28
	adc r25,r29
	add r30,r24
	adc r31,r25
	std Z+17,__zero_reg__
	std Z+16,__zero_reg__
	mov r20,r3
	movw r22,r28
	subi r22,-37
	sbci r23,-1
	adiw r24,16
	call uECC_vli_set
	mov r16,r8
	movw r18,r6
	movw r20,r28
	subi r20,-17
	sbci r21,-1
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r20
	call uECC_vli_modMult
	movw r18,r12
	adiw r28,73-62
	ldd r20,Y+62
	ldd r21,Y+63
	sbiw r28,73-62
	adiw r28,71-62
	ldd r22,Y+62
	ldd r23,Y+63
	sbiw r28,71-62
	movw r24,r28
	adiw r24,1
	call bits2int
	movw r18,r6
	movw r20,r28
	subi r20,-17
	sbci r21,-1
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r20
	call uECC_vli_modAdd
	movw r18,r6
	movw r20,r10
	movw r22,r28
	subi r22,-17
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult
	mov r22,r8
	movw r24,r28
	adiw r24,17
	call uECC_vli_numBits
	movw r30,r12
	ldd r18,Z+1
	mov r22,r18
	mov __tmp_reg__,r18
	lsl r0
	sbc r23,r23
	movw r20,r22
	lsl r20
	rol r21
	lsl r20
	rol r21
	lsl r20
	rol r21
	cp r20,r24
	cpc r21,r25
	brge .L28
	ldi r25,0
	ldi r24,0
	rjmp .L11
.L26:
	mov r22,r8
	movw r24,r28
	adiw r24,1
	call uECC_vli_clear
	ldi r24,lo8(1)
	ldi r25,0
	std Y+2,r25
	std Y+1,r24
	rjmp .L16
.L27:
	subi r20,-7
	sbci r21,-1
	rjmp .L17
.L28:
	movw r20,r28
	subi r20,-17
	sbci r21,-1
	movw r24,r4
	add r24,r18
	adc r25,__zero_reg__
	sbrc r18,7
	dec r25
	call uECC_vli_nativeToBytes
	ldi r24,lo8(1)
	ldi r25,0
	rjmp .L11
	.size	uECC_sign_with_k, .-uECC_sign_with_k
.global	uECC_sign
	.type	uECC_sign, @function
uECC_sign:
	push r2
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,50
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 50 */
/* stack size = 68 */
.L__stack_usage = 68
	movw r6,r24
	movw r8,r22
	movw r4,r20
	std Y+50,r19
	std Y+49,r18
	movw r10,r16
	set
	clr r12
	bld r12,6
	mov r13,__zero_reg__
	movw r2,r16
	ldi r18,20
	add r2,r18
	adc r3,__zero_reg__
	rjmp .L32
.L31:
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	asr r19
	ror r18
	movw r20,r2
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r28
	adiw r24,33
	call uECC_vli_mmod
	movw r14,r10
	ldd r16,Y+49
	ldd r17,Y+50
	movw r18,r28
	subi r18,-33
	sbci r19,-1
	movw r20,r4
	movw r22,r8
	movw r24,r6
	call uECC_sign_with_k
	sbiw r24,0
	brne .L34
	ldi r31,1
	sub r12,r31
	sbc r13,__zero_reg__
	breq .L29
.L32:
	call uECC_get_rng
	movw r30,r24
	or r24,r25
	breq .L33
	ldi r22,lo8(64)
	ldi r23,0
	movw r24,r28
	adiw r24,1
	icall
	sbiw r24,0
	breq .L29
	movw r30,r10
	ldd r24,Z+2
	ldd r25,Z+3
	adiw r24,31
	movw r18,r24
	brpl .L31
	subi r18,-31
	sbci r19,-1
	rjmp .L31
.L33:
	ldi r25,0
	ldi r24,0
.L29:
/* epilogue start */
	adiw r28,50
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	pop r2
	ret
.L34:
	ldi r24,lo8(1)
	ldi r25,0
	rjmp .L29
	.size	uECC_sign, .-uECC_sign
.global	uECC_verify
	.type	uECC_verify, @function
uECC_verify:
	push r2
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	subi r28,-20
	sbc r29,__zero_reg__
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 236 */
/* stack size = 254 */
.L__stack_usage = 254
	movw r12,r24
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	std Y+1,r23
	st Y,r22
	subi r28,lo8(233)
	sbci r29,hi8(233)
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	std Y+1,r21
	st Y,r20
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r14,r18
	movw r2,r16
	movw r26,r16
	ld r5,X
	adiw r26,2
	ld r24,X+
	ld r25,X
	adiw r24,31
	movw r10,r24
	brpl .+2
	rjmp .L56
.L37:
	asr r11
	ror r10
	asr r11
	ror r10
	asr r11
	ror r10
	asr r11
	ror r10
	asr r11
	ror r10
	mov r16,r10
	mov __tmp_reg__,r10
	lsl r0
	sbc r17,r17
	subi r16,1
	sbc r17,__zero_reg__
	movw r24,r16
	lsl r24
	rol r25
	ldi r30,lo8(81)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r24
	adc r31,r25
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	ldi r30,lo8(-55)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r24
	adc r31,r25
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	ldi r30,lo8(-39)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r24,r30
	adc r25,r31
	movw r26,r24
	st X+,__zero_reg__
	st X,__zero_reg__
	movw r30,r2
	ldd r20,Z+1
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r12
	movw r24,r28
	subi r24,87
	sbci r25,-1
	call uECC_vli_bytesToNative
	movw r26,r2
	adiw r26,1
	ld r20,X
	mov r8,r5
	lsl r8
	sbc r9,r9
	mov __tmp_reg__,r31
	ldi r31,lo8(-87)
	mov r6,r31
	mov r7,__zero_reg__
	mov r31,__tmp_reg__
	add r6,r28
	adc r7,r29
	add r6,r8
	adc r7,r9
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r12
	add r22,r20
	adc r23,r21
	movw r24,r6
	call uECC_vli_bytesToNative
	movw r30,r2
	ldd r20,Z+1
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r14
	movw r24,r28
	subi r24,55
	sbci r25,-1
	call uECC_vli_bytesToNative
	movw r26,r2
	adiw r26,1
	ld r20,X
	mov __tmp_reg__,r20
	lsl r0
	sbc r21,r21
	movw r22,r14
	add r22,r20
	adc r23,r21
	movw r24,r28
	subi r24,39
	sbci r25,-1
	call uECC_vli_bytesToNative
	mov r22,r5
	movw r24,r28
	subi r24,55
	sbci r25,-1
	call uECC_vli_isZero
	or r24,r25
	breq .L57
	ldi r24,0
	ldi r25,0
.L36:
/* epilogue start */
	subi r28,20
	sbci r29,-1
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	pop r2
	ret
.L56:
	ldi r27,31
	add r10,r27
	adc r11,__zero_reg__
	rjmp .L37
.L57:
	mov r22,r5
	movw r24,r28
	subi r24,39
	sbci r25,-1
	call uECC_vli_isZero
	or r24,r25
	breq .L58
	ldi r24,0
	ldi r25,0
	rjmp .L36
.L58:
	movw r12,r2
	ldi r27,20
	add r12,r27
	adc r13,__zero_reg__
	mov r20,r10
	movw r22,r28
	subi r22,55
	sbci r23,-1
	movw r24,r12
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L59
	ldi r24,0
	ldi r25,0
	rjmp .L36
.L59:
	mov r20,r10
	movw r22,r28
	subi r22,39
	sbci r23,-1
	movw r24,r12
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	breq .L60
	ldi r24,0
	ldi r25,0
	rjmp .L36
.L60:
	mov r18,r10
	movw r20,r12
	movw r22,r28
	subi r22,39
	sbci r23,-1
	movw r24,r28
	adiw r24,33
	call uECC_vli_modInv
	lsl r16
	rol r17
	ldi r30,lo8(1)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r16
	adc r31,r17
	std Z+1,__zero_reg__
	st Z,__zero_reg__
	movw r18,r2
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r20,Y
	ldd r21,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	movw r24,r28
	adiw r24,1
	call bits2int
	mov r16,r10
	movw r18,r12
	movw r20,r28
	subi r20,-33
	sbci r21,-1
	movw r22,r28
	subi r22,-1
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult
	movw r18,r12
	movw r20,r28
	subi r20,-33
	sbci r21,-1
	movw r22,r28
	subi r22,55
	sbci r23,-1
	movw r24,r28
	adiw r24,17
	call uECC_vli_modMult
	movw r14,r28
	ldi r30,49
	add r14,r30
	adc r15,__zero_reg__
	mov r20,r5
	movw r22,r28
	subi r22,87
	sbci r23,-1
	movw r24,r14
	call uECC_vli_set
	movw r18,r14
	add r18,r8
	adc r19,r9
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	std Y+1,r19
	st Y,r18
	subi r28,lo8(235)
	sbci r29,hi8(235)
	mov r20,r5
	movw r22,r6
	movw r24,r18
	call uECC_vli_set
	mov r20,r5
	movw r24,r2
	adiw r24,36
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	std Y+1,r25
	st Y,r24
	subi r28,lo8(233)
	sbci r29,hi8(233)
	movw r22,r24
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call uECC_vli_set
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	add r22,r8
	adc r23,r9
	mov r20,r5
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call uECC_vli_set
	movw r6,r2
	ldi r25,4
	add r6,r25
	adc r7,__zero_reg__
	mov r16,r5
	movw r18,r6
	movw r20,r28
	subi r20,-113
	sbci r21,-1
	movw r22,r14
	movw r24,r28
	adiw r24,33
	call uECC_vli_modSub
	movw r16,r2
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r18,Y
	ldd r19,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r20,r14
	movw r22,r28
	subi r22,127
	sbci r23,-1
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call XYcZ_add
	mov r18,r5
	movw r20,r6
	movw r22,r28
	subi r22,-33
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modInv
	movw r18,r2
	movw r20,r28
	subi r20,-33
	sbci r21,-1
	subi r28,lo8(-235)
	sbci r29,hi8(-235)
	ld r22,Y
	ldd r23,Y+1
	subi r28,lo8(235)
	sbci r29,hi8(235)
	movw r24,r14
	call apply_z
	subi r28,lo8(-161)
	sbci r29,hi8(-161)
	std Y+1,__zero_reg__
	st Y,__zero_reg__
	subi r28,lo8(161)
	sbci r29,hi8(161)
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r26,Y
	ldd r27,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	subi r28,lo8(-163)
	sbci r29,hi8(-163)
	std Y+1,r27
	st Y,r26
	subi r28,lo8(163)
	sbci r29,hi8(163)
	ldi r30,lo8(-87)
	ldi r31,0
	add r30,r28
	adc r31,r29
	subi r28,lo8(-165)
	sbci r29,hi8(-165)
	std Y+1,r31
	st Y,r30
	subi r28,lo8(165)
	sbci r29,hi8(165)
	subi r28,lo8(-167)
	sbci r29,hi8(-167)
	std Y+1,r15
	st Y,r14
	subi r28,lo8(167)
	sbci r29,hi8(167)
	mov r22,r10
	movw r24,r28
	adiw r24,17
	call uECC_vli_numBits
	mov r16,r24
	mov r17,r25
	mov r22,r10
	movw r24,r28
	adiw r24,1
	call uECC_vli_numBits
	mov r14,r16
	mov r15,r17
	cp r14,r24
	cpc r15,r25
	brge .L39
	movw r14,r24
.L39:
	movw r16,r14
	subi r16,1
	sbc r17,__zero_reg__
	movw r22,r16
	movw r24,r28
	adiw r24,1
	call uECC_vli_testBit
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	brne .L40
	ldi r19,0
.L40:
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	st Y,r19
	subi r28,lo8(233)
	sbci r29,hi8(233)
	subi r28,lo8(-234)
	sbci r29,hi8(-234)
	st Y,r18
	subi r28,lo8(234)
	sbci r29,hi8(234)
	movw r22,r16
	movw r24,r28
	adiw r24,17
	call uECC_vli_testBit
	or r24,r25
	brne .L53
	ldi r25,0
	ldi r24,0
.L41:
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r18,Y
	ldd r19,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	or r24,r18
	or r25,r19
	lsl r24
	rol r25
	ldi r30,lo8(-95)
	ldi r31,0
	add r30,r28
	adc r31,r29
	add r30,r24
	adc r31,r25
	ld r16,Z
	ldd r17,Z+1
	mov r20,r5
	movw r22,r16
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	call uECC_vli_set
	movw r22,r16
	add r22,r8
	adc r23,r9
	mov r20,r5
	movw r24,r28
	subi r24,-97
	sbci r25,-1
	call uECC_vli_set
	mov r22,r5
	movw r24,r28
	adiw r24,33
	call uECC_vli_clear
	ldi r24,lo8(1)
	ldi r25,0
	std Y+34,r25
	std Y+33,r24
	ldi r19,2
	sub r14,r19
	sbc r15,__zero_reg__
	brpl .+2
	rjmp .L42
	movw r24,r2
	subi r24,-84
	sbci r25,-1
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	std Y+1,r25
	st Y,r24
	subi r28,lo8(233)
	sbci r29,hi8(233)
	mov r4,__zero_reg__
	rjmp .L46
.L53:
	ldi r24,lo8(2)
	ldi r25,0
	rjmp .L41
.L44:
	or r30,r16
	or r31,r17
	lsl r30
	rol r31
	ldi r18,lo8(-95)
	ldi r19,0
	add r18,r28
	adc r19,r29
	add r30,r18
	adc r31,r19
	ld r16,Z
	ldd r17,Z+1
	cp r16,__zero_reg__
	cpc r17,__zero_reg__
	brne .+2
	rjmp .L45
	mov r20,r5
	movw r22,r16
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call uECC_vli_set
	movw r22,r16
	add r22,r8
	adc r23,r9
	mov r20,r5
	movw r24,r28
	subi r24,127
	sbci r25,-1
	call uECC_vli_set
	movw r18,r2
	movw r20,r28
	subi r20,-33
	sbci r21,-1
	movw r22,r28
	subi r22,127
	sbci r23,-1
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call apply_z
	mov r16,r5
	movw r18,r6
	movw r20,r28
	subi r20,-113
	sbci r21,-1
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r28
	subi r24,111
	sbci r25,-1
	call uECC_vli_modSub
	movw r16,r2
	movw r18,r28
	subi r18,-97
	sbci r19,-1
	movw r20,r28
	subi r20,-81
	sbci r21,-1
	movw r22,r28
	subi r22,127
	sbci r23,-1
	movw r24,r28
	subi r24,-113
	sbci r25,-1
	call XYcZ_add
	movw r18,r2
	movw r20,r28
	subi r20,111
	sbci r21,-1
	movw r22,r28
	subi r22,-33
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modMult_fast
.L45:
	ldi r19,1
	sub r14,r19
	sbc r15,__zero_reg__
	brcs .L42
.L46:
	subi r28,lo8(-233)
	sbci r29,hi8(-233)
	ld r26,Y
	ldd r27,Y+1
	subi r28,lo8(233)
	sbci r29,hi8(233)
	ld r30,X+
	ld r31,X
	movw r18,r2
	movw r20,r28
	subi r20,-33
	sbci r21,-1
	movw r22,r28
	subi r22,-97
	sbci r23,-1
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	icall
	movw r22,r14
	movw r24,r28
	adiw r24,1
	call uECC_vli_testBit
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	brne .L43
	ldi r19,0
	mov r18,r4
.L43:
	mov r16,r19
	mov r17,r18
	movw r22,r14
	movw r24,r28
	adiw r24,17
	call uECC_vli_testBit
	ldi r30,0
	mov r31,r4
	or r24,r25
	brne .+2
	rjmp .L44
	ldi r30,lo8(2)
	ldi r31,0
	rjmp .L44
.L42:
	mov r18,r5
	movw r20,r6
	movw r22,r28
	subi r22,-33
	sbci r23,-1
	movw r24,r22
	call uECC_vli_modInv
	movw r18,r2
	movw r20,r28
	subi r20,-33
	sbci r21,-1
	movw r22,r28
	subi r22,-97
	sbci r23,-1
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	call apply_z
	mov r20,r10
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r12
	call uECC_vli_cmp_unsafe
	cpi r24,lo8(1)
	brne .L61
.L47:
	mov r20,r5
	movw r22,r28
	subi r22,55
	sbci r23,-1
	movw r24,r28
	subi r24,-81
	sbci r25,-1
	call uECC_vli_equal
	ldi r19,lo8(1)
	ldi r18,0
	or r24,r25
	breq .L48
	ldi r19,0
.L48:
	mov r24,r19
	mov r25,r18
	rjmp .L36
.L61:
	mov r18,r10
	movw r20,r12
	movw r22,r28
	subi r22,-81
	sbci r23,-1
	movw r24,r22
	call uECC_vli_sub
	rjmp .L47
	.size	uECC_verify, .-uECC_verify
	.ident	"GCC: (GNU) 7.3.0"
