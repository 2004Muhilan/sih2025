	.file	"custom_des.c"
__SP_H__ = 0x3e
__SP_L__ = 0x3d
__SREG__ = 0x3f
__tmp_reg__ = 0
__zero_reg__ = 1
	.text
	.section	.rodata
	.type	sbox, @object
	.size	sbox, 512
sbox:
	.byte	14
	.byte	4
	.byte	13
	.byte	1
	.byte	2
	.byte	15
	.byte	11
	.byte	8
	.byte	3
	.byte	10
	.byte	6
	.byte	12
	.byte	5
	.byte	9
	.byte	0
	.byte	7
	.byte	0
	.byte	15
	.byte	7
	.byte	4
	.byte	14
	.byte	2
	.byte	13
	.byte	1
	.byte	10
	.byte	6
	.byte	12
	.byte	11
	.byte	9
	.byte	5
	.byte	3
	.byte	8
	.byte	4
	.byte	1
	.byte	14
	.byte	8
	.byte	13
	.byte	6
	.byte	2
	.byte	11
	.byte	15
	.byte	12
	.byte	9
	.byte	7
	.byte	3
	.byte	10
	.byte	5
	.byte	0
	.byte	15
	.byte	12
	.byte	8
	.byte	2
	.byte	4
	.byte	9
	.byte	1
	.byte	7
	.byte	5
	.byte	11
	.byte	3
	.byte	14
	.byte	10
	.byte	0
	.byte	6
	.byte	13
	.zero	448
	.text
.global	des_encrypt
	.type	des_encrypt, @function
des_encrypt:
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r28
	push r29
	in r28,__SP_L__
	in r29,__SP_H__
	sbiw r28,32
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
/* prologue: function */
/* frame size = 32 */
/* stack size = 42 */
.L__stack_usage = 42
	std Y+28,r25
	std Y+27,r24
	std Y+30,r23
	std Y+29,r22
	std Y+32,r21
	std Y+31,r20
	std Y+1,__zero_reg__
	std Y+2,__zero_reg__
	std Y+3,__zero_reg__
	std Y+4,__zero_reg__
	std Y+5,__zero_reg__
	std Y+6,__zero_reg__
	std Y+7,__zero_reg__
	std Y+8,__zero_reg__
	std Y+10,__zero_reg__
	std Y+9,__zero_reg__
	rjmp .L2
.L3:
	ldd r24,Y+9
	ldd r25,Y+10
	ldd r18,Y+27
	ldd r19,Y+28
	add r24,r18
	adc r25,r19
	movw r30,r24
	ld r24,Z
	mov r10,r24
	mov r11,__zero_reg__
	mov r12,__zero_reg__
	mov r13,__zero_reg__
	mov r14,__zero_reg__
	mov r15,__zero_reg__
	movw r16,r14
	ldi r18,lo8(7)
	ldi r19,0
	ldd r24,Y+9
	ldd r25,Y+10
	movw r20,r18
	sub r20,r24
	sbc r21,r25
	movw r24,r20
	movw r30,r24
	lsl r30
	rol r31
	lsl r30
	rol r31
	lsl r30
	rol r31
	mov r18,r10
	mov r19,r11
	mov r20,r12
	mov r21,r13
	mov r22,r14
	mov r23,r15
	mov r24,r16
	mov r25,r17
	mov r16,r30
	call __ashldi3
	mov r10,r18
	mov r11,r19
	mov r12,r20
	mov r13,r21
	mov r14,r22
	mov r15,r23
	mov r16,r24
	mov r17,r25
	ldd r24,Y+1
	or r24,r10
	std Y+1,r24
	ldd r24,Y+2
	or r24,r11
	std Y+2,r24
	ldd r24,Y+3
	or r24,r12
	std Y+3,r24
	ldd r24,Y+4
	or r24,r13
	std Y+4,r24
	ldd r24,Y+5
	or r24,r14
	std Y+5,r24
	ldd r24,Y+6
	or r24,r15
	std Y+6,r24
	ldd r24,Y+7
	or r24,r16
	std Y+7,r24
	ldd r24,Y+8
	or r24,r17
	std Y+8,r24
	ldd r24,Y+9
	ldd r25,Y+10
	adiw r24,1
	std Y+10,r25
	std Y+9,r24
.L2:
	ldd r24,Y+9
	ldd r25,Y+10
	sbiw r24,8
	brge .+2
	rjmp .L3
	std Y+12,__zero_reg__
	std Y+11,__zero_reg__
	rjmp .L4
.L6:
	ldd r24,Y+1
	ldd r25,Y+2
	ldd r26,Y+3
	ldd r27,Y+4
	std Y+15,r24
	std Y+16,r25
	std Y+17,r26
	std Y+18,r27
	ldd r18,Y+1
	ldd r19,Y+2
	ldd r20,Y+3
	ldd r21,Y+4
	ldd r22,Y+5
	ldd r23,Y+6
	ldd r24,Y+7
	ldd r25,Y+8
	ldi r16,lo8(32)
	call __lshrdi3
	mov r10,r18
	mov r11,r19
	mov r12,r20
	mov r13,r21
	mov r14,r22
	mov r15,r23
	mov r16,r24
	mov r17,r25
	std Y+19,r10
	std Y+20,r11
	std Y+21,r12
	std Y+22,r13
	ldd r24,Y+11
	ldd r25,Y+12
	andi r24,7
	andi r25,128
	tst r25
	brge .L5
	sbiw r24,1
	ori r24,248
	ori r25,255
	adiw r24,1
.L5:
	movw r18,r24
	ldd r24,Y+29
	ldd r25,Y+30
	add r24,r18
	adc r25,r19
	movw r30,r24
	ld r24,Z
	mov r24,r24
	ldi r25,0
	ldi r26,0
	ldi r27,0
	ldd r18,Y+15
	ldd r19,Y+16
	ldd r20,Y+17
	ldd r21,Y+18
	eor r24,r18
	eor r25,r19
	eor r26,r20
	eor r27,r21
	std Y+23,r24
	std Y+24,r25
	std Y+25,r26
	std Y+26,r27
	ldd r18,Y+19
	ldd r19,Y+20
	ldd r20,Y+21
	ldd r21,Y+22
	ldd r24,Y+23
	ldd r25,Y+24
	ldd r26,Y+25
	ldd r27,Y+26
	eor r24,r18
	eor r25,r19
	eor r26,r20
	eor r27,r21
	std Y+19,r24
	std Y+20,r25
	std Y+21,r26
	std Y+22,r27
	ldd r24,Y+15
	ldd r25,Y+16
	ldd r26,Y+17
	ldd r27,Y+18
	movw r10,r24
	movw r12,r26
	mov r14,__zero_reg__
	mov r15,__zero_reg__
	movw r16,r14
	mov r18,r10
	mov r19,r11
	mov r20,r12
	mov r21,r13
	mov r22,r14
	mov r23,r15
	mov r24,r16
	mov r25,r17
	ldi r16,lo8(32)
	call __ashldi3
	mov r10,r18
	mov r11,r19
	mov r12,r20
	mov r13,r21
	mov r14,r22
	mov r15,r23
	mov r16,r24
	mov r17,r25
	ldd r24,Y+19
	ldd r25,Y+20
	ldd r26,Y+21
	ldd r27,Y+22
	movw r18,r24
	movw r20,r26
	ldi r22,0
	ldi r23,0
	movw r24,r22
	mov r30,r10
	or r30,r18
	std Y+1,r30
	mov r30,r11
	or r30,r19
	std Y+2,r30
	mov r30,r12
	or r30,r20
	std Y+3,r30
	mov r30,r13
	or r30,r21
	std Y+4,r30
	mov r30,r14
	or r30,r22
	std Y+5,r30
	mov r30,r15
	or r30,r23
	std Y+6,r30
	mov r30,r16
	or r30,r24
	std Y+7,r30
	mov r24,r17
	or r24,r25
	std Y+8,r24
	ldd r24,Y+11
	ldd r25,Y+12
	adiw r24,1
	std Y+12,r25
	std Y+11,r24
.L4:
	ldd r24,Y+11
	ldd r25,Y+12
	sbiw r24,16
	brge .+2
	rjmp .L6
	std Y+14,__zero_reg__
	std Y+13,__zero_reg__
	rjmp .L7
.L8:
	ldi r18,lo8(7)
	ldi r19,0
	ldd r24,Y+13
	ldd r25,Y+14
	movw r20,r18
	sub r20,r24
	sbc r21,r25
	movw r24,r20
	movw r30,r24
	lsl r30
	rol r31
	lsl r30
	rol r31
	lsl r30
	rol r31
	ldd r18,Y+1
	ldd r19,Y+2
	ldd r20,Y+3
	ldd r21,Y+4
	ldd r22,Y+5
	ldd r23,Y+6
	ldd r24,Y+7
	ldd r25,Y+8
	mov r16,r30
	call __lshrdi3
	mov r10,r18
	mov r11,r19
	mov r12,r20
	mov r13,r21
	mov r14,r22
	mov r15,r23
	mov r16,r24
	mov r17,r25
	ldd r24,Y+13
	ldd r25,Y+14
	ldd r18,Y+31
	ldd r19,Y+32
	add r24,r18
	adc r25,r19
	mov r18,r10
	movw r30,r24
	st Z,r18
	ldd r24,Y+13
	ldd r25,Y+14
	adiw r24,1
	std Y+14,r25
	std Y+13,r24
.L7:
	ldd r24,Y+13
	ldd r25,Y+14
	sbiw r24,8
	brlt .L8
	nop
/* epilogue start */
	adiw r28,32
	in __tmp_reg__,__SREG__
	cli
	out __SP_H__,r29
	out __SREG__,__tmp_reg__
	out __SP_L__,r28
	pop r29
	pop r28
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	ret
	.size	des_encrypt, .-des_encrypt
	.ident	"GCC: (GNU) 7.3.0"
.global __do_copy_data
